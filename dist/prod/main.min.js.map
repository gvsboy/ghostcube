{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","main.min.js","src/js/app.js","src/js/bot.js","src/js/cube/cube.js","src/js/cube/line.js","src/js/cube/side.js","src/js/cube/tile.js","src/js/game.js","src/js/messages.js","src/js/player.js","src/js/recorder.js","src/js/render/keyboard.js","src/js/render/renderer.js","src/js/render/touch.js","src/js/selection/CubeCache.js","src/js/selection/TileSelector.js","src/js/selection/TileSelectorResult.js","src/js/tutorial.js","src/js/util/Tracker.js","src/js/util/util.js","src/js/util/vendor.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","_interopRequireWildcard","obj","__esModule","default","_Game","_Game2","window","addEventListener","document","body","classList","add","./game","babel/polyfill",2,"Bot","name","tileClass","cube","opponent","_Player2","this","Object","defineProperty","value","_import","_import2","_Player","THINKING_SPEED","prototype","play","_logText","_log","_selectLines","_selectOpponentLines","_selectSingles","_selectOpponentSingles","selectRandom","_selector","getSelected","useOpponent","_this","lines","getLines","some","line","attack","initial","getInitialTile","tile","missingTiles","getAttackTile","selectTile","success","_this2","singles","shuffle","getSingles","single","isNeighboringSide","_selectByTileLine","revert","_this3","lineTiles","getAllLineTiles","find","lineTile","text","reduce","arguments","data","push","isEmpty","toString","join","./player","lodash",3,"Cube","el","size","style","_sides","_eventMap","_Side","_Side2","_import3","vendor","ROTATE_X_PREFIX","ROTATE_Y_PREFIX","ROTATE_UNIT_SUFFIX","REVOLUTION","ROTATION_UNIT","ORIGIN","build","_buildSides","x","y","Promise","resolve","events","animationIteration","animationEnd","evt","target","remove","setRenderer","renderer","_renderer","rotate","_calculateCoordinate","js","transform","rotateToTiles","tiles","pairs","_getCommonVisibleCoordinates","coors","_getShortestRotationDistance","setMovement","then","listenTo","eventName","callback","context","handler","bind","stopListeningTo","forEach","removeEventListener","getSides","getVisibleSides","getAvailableTiles","except","tilesBySide","list","side","flatten","sortBy","updateCrosshairs","getNeighbors","neighbor","translate","tile1","tile2","neighbors","without","isVisible","intersection","current","difference","result","visibilityMap","map","_visibilityMap","xCoors","apply","keys","parseInt","yCoors","coor","pluck","zip","_getShortestCoordinateDiff","originCoor","targetCoor","revolution","diff","Math","abs","lowest","sides","children","id","TOP","top","BOTTOM","bottom","FRONT","front","BACK","back","LEFT","left","RIGHT","right","neighborMap","315","45","135","225","forIn","setNeighbors","setVisibilityMap","../util/vendor","./side",4,"Line","first","update","info","getTiles","all","every","includes","_tiles","pulsate","addClass","isHorizontal","xLine","indicies","matchedLine","yLine","xor","originIndex","index","flip","middle","floor","pow",5,"Side","_neighbors","_buildTiles","_Tile","_Tile2","_Line","_Line2","isNeighbor","contains","cubeX","cubeY","isUndefined","at","isArray","uniq","reject","times","slice","arr","mod","updateLines","./line","./tile",6,"Tile","claimedBy","appendChild","_events","_listenOnce","createElement","className","setTimeout","random","claim","player","removeClass","listenOnce","release","union","toSide","translation","translationMap","newLine","rest","transformedLine","method","X","Y","FLIP","ROTATE","../util/util",7,"Game","containerId","container","getElementById","isMobile","test","navigator","userAgent","_Cube2","querySelector","messages","_Messages2","_Renderer2","players","currentPlayer","_helperTile","recorder","_Recorder2","idle","_Cube","_Bot","_Bot2","_Renderer","_Recorder","_Messages","_Tutorial","_Tutorial2","_Tracker","_Tracker2","tracker","hitbox","display","_initializeTutorial","initializeGame","human","bot","turns","initialize","on","clearHelperTile","setCurrentPlayer","sendGameEvent","GAME_START","enableCubeInteraction","listenForInput","_handleClick","_handleMouseOver","_handleMouseOut","disableCubeInteraction","stopListeningForInput","botManual","hasValidMoves","isBot","_botTileSelection","_stalemate","getOpponent","indexOf","showCrosshairs","hideCrosshairs","tutorial","hook","_endTurn","getWinLines","record","_endGame","modifier","winBy","GAME_BOT_WIN","GAME_PLAYER_WIN","invoke","_waitAndListenForReset","GAME_STALEMATE","_resetGameState","removeAll","GAME_RESET","setSyncMovement","releaseAll","_getTileFromElement","split","_this4","wait","claimAll","_this5","selected","deselect","failure","initialTile","./bot","./cube/cube","./messages","./recorder","./render/renderer","./tutorial","./util/Tracker","./util/util","./util/vendor",8,"Messages","delay","queue","_buildContainer","_remove","source","message","classes","_generateItem","LIST","item","DOMTokenList","createTextNode","_enqueue","last","removeChild","claimed","targetClaimed","cannotAttack","sameSide","notNeighbor","stalemate","newGame",9,"Player","_TileSelector2","_cubeCache","_CubeCache2","_TileSelector","_CubeCache","getAllTiles","_singles","getInitial","_cube","filter","canAttack","attackTile","validate","_selected","array","_createAttackData","reset","hasMove","attempt","selector","assign","./selection/CubeCache","./selection/TileSelector",10,"Recorder","app","_timeline","_cursor","_app","MESSAGES","NOT_FOUND","REWRITE","NO_LOG","behind","console","warn","dropRight","_package","forward","turnData","log","reverse","./cube/tile",11,"Keyboard","keyCodes","speed","collection","listen","undefined","generateHandler","partialRight","_boundHandleKeydown","_handleKeydown","_boundHandleKeyup","_handleKeyup","stopListening","getMovement","KB","UP","W","DOWN","S","A","D","keyCode","SPACE","ESCAPE",12,"Renderer","keyboard","touch","moveX","moveY","tickMax","tick","_EventEmitter","_Keyboard","_Keyboard2","_Touch","_Touch2","_input","_movementListener","draw","_setMovementFromInput","_loop","emit","move","coorProp","once","max","requestAnimationFrame","movement","EventEmitter","./keyboard","./touch",13,"Touch","iface","_Hammer2","get","set","direction","DIRECTION_ALL","threshold","velocity","_Hammer","_boundHandleSwipe","_handleSwipe","off","shift","offsetDirection","DIRECTION_UP","DIRECTION_DOWN","DIRECTION_LEFT","DIRECTION_RIGHT","hammerjs",14,"CubeCache","_lineMap","xPartial","_getPartialLineTiles","yPartial","xGrow","_growLine","yGrow","xShrink","yShrink","pull","_shrinkLine","_composesLines","_getLinesAsChain","concat","chain","values","compact","ln","../cube/line",15,"_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","_TileSelectorResult","_TileSelectorResult2","TileSelector","_player","resolveData","FAILURE_CLAIMED","_deselect","FAILURE_NOT_NEIGHBOR","merge","_select","FAILURE_CANNOT_ATTACK","toArray","Array","./TileSelectorResult",16,"TileSelectorResult","_success","_data",17,"Tutorial","methodName","oldMethod","lessons","stepMessages","start","click","turn",18,"SCRIPT_ENDPOINT","ACCOUNT","TRACKER_NAMESPACE","Tracker","ga","_initGateway","action","fields","hitType","eventCategory","eventAction","eventValue","win","doc","script","placeholder","getElementsByTagName","GoogleAnalyticsObject","q","Date","async","src","parentNode","insertBefore",19,"type","_handler","_x",20,"stylePrefix","animationProperty","eventTypes","STYLE","TRANSFORM","STYLE_PREFIXES","ANIMATION_EVENT_MAP","animation","-o-animation","-moz-animation","-webkit-animation","len","css","toLowerCase","animationStart","mozRequestAnimationFrame","webkitRequestAnimationFrame","msRequestAnimationFrame","has3D","prop","computedStyle","PRESERVE_3D","properties","element","getComputedStyle","getPropertyValue","WEBKIT_TRANSFORM_STYLE","MOZ_TRANSFORM_STYLE","MS_TRANSFORM_STYLE","TRANSFORM_STYLE","webkitTransformStyle","MozTransformStyle","msTransformStyle","transformStyle"],"mappings":"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","file":"main.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",null,"import 'babel/polyfill';\nimport Game from './game';\n\n// Create a new game on load!\nwindow.addEventListener('load', () => {\n  document.body.classList.add('loaded');\n  var game = new Game('container');\n});\n","import _ from 'lodash';\nimport Player from './player';\n\nfunction Bot(name, tileClass, cube, opponent) {\n  Player.call(this, name, tileClass, cube);\n  this.opponent = opponent;\n}\n\nBot.THINKING_SPEED = 600;\n\nBot.prototype = {\n\n  /**\n   * Run through a list of tile selection commands in order of urgency.\n   * For instance, winning moves are more urgent than blocking single tiles.\n   * @return {Array} A collection of tiles selected.\n   */\n  play: function() {\n\n    // Init log.\n    this._logText = '';\n    this._log('================== BOT MOVE ==================');\n\n    // Is a bot win possible?\n    this._selectLines() ||\n\n    // Is a player (opponent) win possible?\n    this._selectOpponentLines() ||\n\n    // Are there available bot singles to extend into lines?\n    this._selectSingles() ||\n\n    // Are there available player (opponent) singles to block lines?\n    this._selectOpponentSingles() ||\n\n    // Is there any possible move at all?!\n    this.selectRandom();\n\n    // Return what we have, which is hopefully a trio of selected tiles.\n    return this._selector.getSelected();\n  },\n\n  /**\n   * Find lines to complete, either to win the game or to block\n   * the opponent.\n   * @param  {Boolean} useOpponent Should we use the opponent's lines?\n   * @return {Boolean} Was a match successful?\n   */\n  _selectLines: function(useOpponent) {\n\n    var lines = useOpponent ? this.opponent.getLines() : this.getLines();\n    this._log('++++++ LINES' + (useOpponent ? ' OPPONENT:' : ':'), lines);\n\n    return _.some(lines, line => {\n\n      var initial = this.getInitialTile(),\n          tile = line.missingTiles()[0],\n          attack;\n\n      this._log('+++ lines loop [initial, tile] :', initial, tile);\n\n      // If there's a tile selected already, try to seal the deal with two more.\n      if (initial && tile) {\n        attack = this.getAttackTile(initial, tile);\n        return attack && this.selectTile(tile, attack).success();\n      }\n      else {\n        this.selectTile(tile);\n      }\n    });\n  },\n\n  /**\n   * Block the opponent's lines to prevent a win.\n   * Relies on _selectLines.\n   * @return {Boolean} Was a match successful?\n   */\n  _selectOpponentLines: function() {\n    return this._selectLines(true);\n  },\n\n  /**\n   * Find singles to surround, either to build bot lines or to block the\n   * opponent from building lines.\n   * @param  {Boolean} useOpponent Should we use the opponent's singles?\n   * @return {Boolean} Was a match successful?\n   */\n  _selectSingles: function(useOpponent) {\n\n    var singles = _.shuffle(useOpponent ? this.opponent.getSingles() : this.getSingles());\n    this._log('------ SINGLES' + (useOpponent ? ' OPPONENT:' : ':'), singles);\n\n    return _.some(singles, single => {\n\n      var initial = this.getInitialTile(),\n          tile,\n          attack;\n\n      // If there is no initial tile or this singles selection is on a neighboring\n      // side, make a selection attempt.\n      if (!initial || single.isNeighboringSide(initial)) {\n        tile = this._selectByTileLine(single);\n      }\n\n      this._log('--- singles loop [initial, tile] :', initial, tile);\n\n      if (initial && tile) {\n        attack = this.getAttackTile(initial, tile);\n        this._selector.revert();\n        return attack && this.selectTile(tile, attack).success();\n      }\n    });\n  },\n\n  /**\n   * Surround opponent's singles to block further line creation.\n   * Relies on _selectSingles.\n   * @return {Boolean} Was a match successful?\n   */\n  _selectOpponentSingles: function() {\n    return this._selectSingles(true);\n  },\n\n  /**\n   * Attempts to select a tile on the same line as the given tile.\n   * Scans both x and y lines, shuffling the collection.\n   * @param  {Tile} tile The target tile.\n   * @return {Tile} The selected tile.\n   */\n  _selectByTileLine: function(tile) {\n\n    // Grab all the tiles on the same line as the passed tile.\n    var lineTiles = _.shuffle(tile.getAllLineTiles());\n\n    // Return the first tile that is a valid selection.\n    return _.find(lineTiles, lineTile => this.selectTile(lineTile).success());\n  },\n\n  /**\n   * A simple logging mechanism to record the bot's thoughts.\n   * Used in the Recorder object which looks for the _logText property.\n   */\n  _log: function() {\n\n    var text = _.reduce(arguments, function(lines, data) {\n      lines.push(!_.isEmpty(data) ? data.toString() : 'NONE');\n      return lines;\n    }, []).join(' ');\n\n    // Immediately output the message in the console.\n    //console.log(text);\n\n    // Append the text to the master log.\n    this._logText += text + '\\n';\n  }\n\n};\n\nexport default Bot;\n","import _ from 'lodash';\nimport Side from './side';\nimport * as vendor from '../util/vendor';\n\nfunction Cube(el, size) {\n\n  // The HTML element representing the cube.\n  this.el                     = el;\n\n  // The cube's size regarding tiles across a side. Default to 3.\n  this.size                   = size || 3;\n\n  // Cached reference to the style object.\n  this.style                  = this.el.style;\n\n  // This will be set in beginGame.\n  this._sides = null;\n\n  this._eventMap = {};\n}\n\nCube.ROTATE_X_PREFIX = 'rotateX(';\nCube.ROTATE_Y_PREFIX = 'rotateY(';\nCube.ROTATE_UNIT_SUFFIX = 'deg)';\nCube.REVOLUTION = 360;\nCube.ROTATION_UNIT = 90;\nCube.ORIGIN = 0;\n\nCube.prototype = {\n\n  /**\n   * Builds the game-mode version of the cube, slowing down the idle state\n   * to a stop and transitioning to the center of the screen. The initial\n   * rotation coordinate values are set and the sides are generated with their\n   * child tiles.\n   * @return {Promise} A promise that resolves when the transition ends.\n   */\n  build: function() {\n\n    // Create the game sides. The tiles will animate into existence from a\n    // trigger function during each side's creation.\n    this._sides = this._buildSides(this.size);\n\n    // Set the initial rotated state. Cut at 45 degrees to always display three sides.\n    this.x = this.y = Cube.REVOLUTION - (Cube.ROTATION_UNIT / 2);\n\n    return new Promise(resolve => {\n\n      // A reference to the cube's element.\n      var el = this.el;\n\n      // After the cube's rotation animation has made one loop, begin to slow it down.\n      el.addEventListener(vendor.events.animationIteration, function() {\n        el.classList.add('transition');\n        el.addEventListener(vendor.events.animationEnd, function animEnd(evt) {\n          if (evt.target === el) {\n\n            // Remove the transition class and append the init class. Done!\n            el.classList.remove('transition');\n            el.classList.add('init');\n\n            // Let's go!\n            resolve();\n          }\n        });\n      });\n    });\n  },\n\n  /**\n   * Sets a renderer so the cube can render itself. This is a bit hacky; please find\n   * another way to accomplish self-rendering.\n   * @param {Renderer} renderer The renderer to set on the cube.\n   */\n  setRenderer: function(renderer) {\n    this._renderer = renderer;\n  },\n\n  rotate: function(x, y) {\n    this.x = this._calculateCoordinate(this.x, x);\n    this.y = this._calculateCoordinate(this.y, y);\n\n    this.style[vendor.js.transform] =\n      Cube.ROTATE_X_PREFIX + this.x + Cube.ROTATE_UNIT_SUFFIX + ' ' + Cube.ROTATE_Y_PREFIX + this.y + Cube.ROTATE_UNIT_SUFFIX;\n  },\n\n  /**\n   * Calculate the rotation needed to display all the given tiles which\n   * must be neighbors to each other (for obvious reasons).\n   * @param  {Array} tiles A collection of tiles (three maximum).\n   * @return {Promise} A promise that resolves when the rotation is complete.\n   */\n  rotateToTiles: function(tiles) {\n\n    // First, collect all the common coordinates each tile shares when visible.\n    var pairs = this._getCommonVisibleCoordinates(tiles),\n\n        // Next, get calculate the shortest rotation distance from the pairs.\n        coors = this._getShortestRotationDistance(pairs);\n\n    // Return a promise that will resolve when the cube's rotation render completes.\n    return new Promise(resolve => {\n      this._renderer\n        .setMovement(coors[0], coors[1])\n        .then(resolve);\n    });\n  },\n\n  listenTo: function(eventName, callback, context) {\n\n    var events = this._eventMap,\n        handler = _.bind(callback, context || this);\n\n    if (!events[eventName]) {\n      events[eventName] = [];\n    }\n\n    this._eventMap[eventName].push(handler);\n    this.el.addEventListener(eventName, handler);\n\n    return this;\n  },\n\n  stopListeningTo: function(eventName) {\n\n    _.forEach(this._eventMap[eventName], function(handler) {\n      this.el.removeEventListener(eventName, handler);\n    }, this);\n\n    return this;\n  },\n\n  /**\n   * Fetches a cube side by name (e.g. 'top')\n   * @param  {String} name The name of the side you want.\n   * @return {Side}      The Side object by name.\n   */\n  getSides: function(name) {\n    return name ? this._sides[name] : this._sides;\n  },\n\n  /**\n   * @return {Array} The three visible sides.\n   */\n  getVisibleSides: function() {\n\n  },\n\n  /**\n   * Retrieves all the unclaimed tiles and sorts them by the amount per\n   * side in ascending order. If an exception tile is passed, do not include\n   * unclaimed tiles from that tile's side.\n   * @param  {Tile} except The tile whose side to exclude.\n   * @return {Array} A list of all the available tiles.\n   */\n  getAvailableTiles: function(except) {\n\n    // Get all the tiles by side and push each array to the main array list.\n    var tilesBySide = _.reduce(this.getSides(), function(list, side) {\n      if (!except || side !== except.side) {\n        list.push(_.shuffle(side.getAvailableTiles()));\n      }\n      return list;\n    }, []);\n\n    // Sort each side's array by length and then flatten the whole thing.\n    return _.flatten(_.sortBy(tilesBySide, 'length'));\n  },\n\n  /**\n   * Updates the passed tile and all related adjacent tiles with the\n   * passed callback. This method is mostly used for highlighting tiles\n   * to help the user make strategy decisions easier.\n   * @param  {DOMElement}   tile The selected tile as a raw DOM element.\n   * @param  {Function}     callback   The method to invoke passing each tile as an argument.\n   */\n  updateCrosshairs: function(tile, callback) {\n\n    // Run the callback on all tiles in the lines associated with the given tile.\n    _.forEach(tile.getAllLineTiles(), callback);\n\n    // For each neighbor, pass in the side and the orientation id (e.g. 'left').\n    _.forEach(tile.side.getNeighbors(), neighbor => {\n\n      // Find the translated tiles and run the callback on each.\n      _.forEach(tile.translate(neighbor), callback);\n    });\n  },\n\n  /**\n   * Gets the tile where the two passed tile's coordinates intersect.\n   * @param {Tile} [tile1] The first tile selected.\n   * @param {Tile} [tile2] The second tile selected.\n   * @return {Tile}       The tile being attacked.\n   */\n  getAttackTile: function(tile1, tile2) {\n\n    var neighbors, side;\n\n    if (tile1 && tile2 && tile1.isNeighboringSide(tile2)) {\n\n      // Get the neighbor sides and exclude the selected side.\n      neighbors = _.without(tile2.side.getNeighbors(), tile1.side),\n\n      // Get the neighbor that is visible.\n      side = _.find(neighbors, neighbor => neighbor.isVisible(this.x, this.y));\n\n      // Return the tile that intersects the two passed tiles.\n      return _.intersection(tile1.translate(side), tile2.translate(side))[0];\n    }\n\n    return null;\n  },\n\n  /**\n   * Given a current coordinate, update it with the difference.\n   * If the result is out of the revolution bounds (between 0 and 360),\n   * adjust it to a valid value.\n   * @param  {Number} current    The current coordinate value.\n   * @param  {Number} difference The value to update the current coordinate by.\n   * @return {Number}            The normalized result.\n   */\n  _calculateCoordinate: function(current, difference) {\n\n    var REVOLUTION = Cube.REVOLUTION,\n        result = current + difference;\n\n    if (result > REVOLUTION) {\n      result = result - REVOLUTION;\n    }\n    else if (result <= Cube.ORIGIN) {\n      result = REVOLUTION - result;\n    }\n\n    return result;\n  },\n\n  /**\n   * Calculates all the possible x/y coordinate combinations that exist\n   * where all the given tiles will be visible.\n   * @param  {Array} tiles The tiles to test.\n   * @return {Array}       A collection of valid coordinate collections.\n   *                       e.g. [[225, 225], [315, 45]]\n   */\n  _getCommonVisibleCoordinates: function(tiles) {\n\n    // Collect the visibility map of each passed tile into an array.\n    var visibilityMap = _.map(tiles, tile => tile.side._visibilityMap),\n\n        // Find all the x coordinates shared by all the tiles.\n        xCoors = _.intersection.apply(_, _.map(visibilityMap, function(map) {\n          return _.map(_.keys(map), _.parseInt);\n        })),\n\n        // Given the available x coordinates, find the shared y coordinates.\n        yCoors = _.flatten(_.map(xCoors, function(coor) {\n          return _.intersection.apply(_, _.pluck(visibilityMap, coor));\n        }));\n\n    // Return a collection of x/y collections shared among all the passed tiles.\n    return _.zip(xCoors, yCoors);\n  },\n\n  /**\n   * Calculates the shortest rotation distance between an origin coordinate\n   * and a target coordinate. Accounts for the circular continuation loop from 360\n   * to 0 and the reverse.\n   * @param  {Number} originCoor The coordinate you're currently at.\n   * @param  {Number} targetCoor The coordinate you wish to be at.\n   * @return {Number}            The shortest rotation movement to reach the target.\n   */\n  _getShortestCoordinateDiff: function(originCoor, targetCoor) {\n\n    var revolution = Cube.REVOLUTION,\n        diff = targetCoor - originCoor;\n\n    // If the absolute difference is more than half of a revolution, we need to\n    // take the circular continuation into account to get the shortest distance.\n    if (Math.abs(diff) > revolution / 2) {\n\n      // If the target is higher than the origin, we need to go into reverse.\n      if (targetCoor > originCoor) {\n        diff = targetCoor - revolution - originCoor;\n      }\n\n      // Otherwise, let's move ahead.\n      else {\n        diff = revolution - originCoor + targetCoor;\n      }\n    }\n\n    return diff;\n  },\n\n  /**\n   * Calculates the shortest rotation distance given a collection of\n   * coordinate pairs. This method is meant to be used with data provided\n   * by _getCommonVisibleCoordinates.\n   * @param  {Array} pairs A collection of coordinate pairs.\n   * @return {Array}       A single coordinate pair. e.g. [45, 135]\n   */\n  _getShortestRotationDistance: function(pairs) {\n\n    return _.reduce(pairs, function(lowest, current) {\n\n      // First, determine shortest differences for each coordinate so we can\n      // compare them to a previous lowest pair.\n      var diff = [\n        this._getShortestCoordinateDiff(this.x, current[0]),\n        this._getShortestCoordinateDiff(this.y, current[1])\n      ];\n\n      // If a lowest pair hasn't been set yet or the sum of the current coor\n      // differences is less than the previously set lowest pair's, then return\n      // the current pair as the lowest.\n      if (!lowest || Math.abs(diff[0]) + Math.abs(diff[1]) < Math.abs(lowest[0]) + Math.abs(lowest[1])) {\n        return diff;\n      }\n\n      // Otherwise, return the lowest.\n      return lowest;\n    }, null, this);\n  },\n\n  _buildSides: function(size) {\n\n    // Create sides.\n    var sides = _.reduce(this.el.children, function(list, el) {\n      list[el.id] = new Side(el, size);\n      return list;\n    }, {});\n\n    var TOP = sides.top,\n        BOTTOM = sides.bottom,\n        FRONT = sides.front,\n        BACK = sides.back,\n        LEFT = sides.left,\n        RIGHT = sides.right;\n\n    // Pretty crappy ... FOR TESTING ONLY!\n    var neighborMap = {\n      top: [BACK, FRONT, LEFT, RIGHT],\n      bottom: [FRONT, BACK, LEFT, RIGHT],\n      front: [TOP, BOTTOM, LEFT, RIGHT],\n      back: [BOTTOM, TOP, LEFT, RIGHT],\n      left: [TOP, BOTTOM, BACK, FRONT],\n      right: [TOP, BOTTOM, FRONT, BACK]\n    };\n\n    var visibilityMap = {\n      // x: [y]\n      front: {\n        '315':    [45, 315],\n        '45':     [45, 315],\n        '135':    [135, 225],\n        '225':    [135, 225]\n      },\n\n      back: {\n        '315':    [135, 225],\n        '45':     [135, 225],\n        '135':    [45, 315],\n        '225':    [45, 315]\n      },\n\n      top: {\n        '315':    [45, 135, 225, 315],\n        '225':    [45, 135, 225, 315]\n      },\n\n      bottom: {\n        '135':    [45, 135, 225, 315],\n        '45':     [45, 135, 225, 315]\n      },\n\n      left: {\n        '315':    [45, 135],\n        '45':     [45, 135],\n        '135':    [225, 315],\n        '225':    [225, 315]\n      },\n\n      right: {\n        '315':    [225, 315],\n        '45':     [225, 315],\n        '135':    [45, 135],\n        '225':    [45, 135]\n      }\n    };\n\n    // Now set the neighbors for each side.\n    return _.forIn(sides, function(side) {\n      side.setNeighbors(neighborMap[side.id]);\n      side.setVisibilityMap(visibilityMap[side.id]);\n    });\n  }\n\n};\n\nexport default Cube;\n","import _ from 'lodash';\n\n/**\n * Lines represent tiles in either a horizontal or vertical row\n * which serve as points or win states.\n * @param {Array} tiles  A collection of tiles that compose the line.\n */\nfunction Line(tiles) {\n  this.side = _.first(tiles).side;\n  this.update(tiles);\n}\n\nLine.prototype = {\n\n  /**\n   * Outputs useful identifying information for troubleshooting.\n   * @return {String} String information.\n   */\n  toString: function() {\n    var info = _.reduce(this.getTiles(), function(tiles, tile) {\n      tiles.push(tile.toString());\n      return tiles;\n    }, []);\n    return '(' + info.join(' ') + ')';\n  },\n\n  /**\n   * Checks to see if the line contains all of the passed tiles.\n   * @param  {Array} tiles The tiles to check.\n   * @return {Boolean} Does the line contain the passed tiles?\n   */\n  all: function(tiles) {\n    var lineTiles = this.getTiles();\n    return _.every(tiles, tile => {\n      return _.includes(lineTiles, tile);\n    });\n  },\n\n  /**\n   * Checks to see if all the tiles in the line are included in\n   * the passed tiles array.\n   * @param  {[type]} tiles [description]\n   * @return {[type]}       [description]\n   */\n  some: function(tiles) {\n    return _.every(this.getTiles(), tile => {\n      return _.includes(tiles, tile);\n    });\n  },\n\n  update: function(tiles) {\n    this._tiles = tiles;\n  },\n\n  /**\n   * Updates the UI to display a winning state involving the line.\n   */\n  pulsate: function() {\n    _.forEach(this.getTiles(), tile => tile.addClass('win'));\n  },\n\n  /**\n   * Reports whether or not the line is horizontal by checking the\n   * index difference between two adjacent tiles.\n   * @return {Boolean} Is this line horizontal?\n   */\n  isHorizontal: function() {\n    var tiles = this.getTiles();\n    return _.includes(tiles[0].xLine.getTiles(), tiles[1]);\n  },\n\n  /**\n   * @return {Array} A collection of tiles that compose the line.\n   */\n  getTiles: function() {\n    return this._tiles;\n  },\n\n  /**\n   * @return {Number} The number of tiles in the line.\n   */\n  length: function() {\n    return this._tiles.length;\n  },\n\n  /**\n   * @return {Array} The indicies of all the tiles.\n   */\n  indicies: function() {\n    return _.map(this.getTiles(), 'index');\n  },\n\n  /**\n   * @return {Array} A collection of the missing tiles.\n   */\n  missingTiles: function() {\n\n    var tiles = this.getTiles(),\n\n        // Are we matching against a horizontal or vertical line?\n        matchedLine = this.isHorizontal() ? _.first(tiles).xLine : _.first(tiles).yLine;\n\n    // Now we can figure out which tiles are missing by diffing the two lines.\n    return _.xor(tiles, matchedLine.getTiles());\n  },\n\n  // Rotate in place, like a Tetrad. For instance:\n  // xoo      xxx\n  // xoo  ->  ooo\n  // xoo      ooo\n  rotate: function() {\n\n    // Where the line begins, starting from top-left.\n    var originIndex = _.first(this.getTiles()).index;\n\n    if (this.isHorizontal()) {\n      return this.side.getTiles(originIndex + (originIndex / this.length()))[0].yLine;\n    }\n\n    return this.side.getTiles(originIndex * this.length())[0].xLine;\n  },\n\n  // Flip across a median. For instance:\n  //    xoo      oox\n  //    xoo  ->  oox\n  //    xoo      oox\n  flip: function() {\n\n    // Where the line begins, starting from top-left.\n    var originIndex = _.first(this.getTiles()).index,\n\n        // The middle line.\n        middle;\n\n    if (this.isHorizontal()) {\n\n      // The middle row, which is the size squared cut in half and floored.\n      // NOTE: This could be buggy with other sizes!\n      middle = Math.floor((Math.pow(this.length(), 2) / 2) - 1);\n\n      // Determine the difference and get the calculated x line.\n      return this.side.getTiles(middle * 2 - originIndex)[0].xLine;\n    }\n\n    // The middle column.\n    middle = (this.length() - 1) / 2;\n\n    // Determine the difference and get the calculated y line.\n    return this.side.getTiles(middle * 2 - originIndex)[0].yLine;\n  }\n\n};\n\nexport default Line;","import _ from 'lodash';\nimport Tile from './tile';\nimport Line from './line';\n\nfunction Side(el, size) {\n\n  // HTML element representing the side.\n  this.el = el;\n\n  // The face id (top, bottom, front, back, left, right).\n  this.id = el.id;\n\n  // This will be set using setNeighbors().\n  this._neighbors = {};\n\n  // An array of all the tiles by index.\n  this._tiles = this._buildTiles(size);\n}\n\nSide.prototype = {\n\n  getNeighbors: function() {\n    return this._neighbors;\n  },\n\n  setNeighbors: function(sides) {\n    this._neighbors = sides;\n  },\n\n  /**\n   * A check to determine if the passed side is one of this side's neighbors.\n   * @param  {Side}  side The side object to check.\n   * @return {Boolean}      Is the passed side a neighbor?\n   */\n  isNeighbor: function(side) {\n    return _.contains(this._neighbors, side);\n  },\n\n  setVisibilityMap: function(map) {\n    this._visibilityMap = map;\n  },\n\n  isVisible: function(cubeX, cubeY) {\n    return _.contains(this._visibilityMap[cubeX], cubeY);\n  },\n\n  /**\n   * Fetches specific tiles referenced by the passed indicies,\n   * or all tiles if indicies are not passed.\n   * @param  {[String|Number|Number[]]} indicies An array of indicies.\n   * @return {Tile[]}          An array of selected tiles.\n   */\n  getTiles: function(indicies) {\n    if (_.isUndefined(indicies)) {\n      return this._tiles;\n    }\n    return _.at(this._tiles, _.isArray(indicies) ? _.uniq(_.flatten(indicies)) : +indicies);\n  },\n\n  /**\n   * Returns all the tiles that are still unclaimed.\n   * @return {Array} A collection of unclaimed tiles.\n   */\n  getAvailableTiles: function() {\n    return _.reject(this._tiles, 'claimedBy');\n  },\n\n  _buildTiles: function(size) {\n\n    // First let's create an array of tiles based on the cube size.\n    var tiles = _.times(Math.pow(size, 2), index => new Tile(this, index)),\n\n    // Now we'll create lines from the tiles.\n    lines = {\n\n      // Creating x coordinate lines.\n      x: _.times(size, function(n) {\n          return new Line(tiles.slice(n * size, (n + 1) * size));\n        }),\n\n      // Creating y coordinate lines.\n      y: _.times(size, function(n) {\n          var arr = _.times(size, function(i) {\n            return n + i * size;\n          });\n          return new Line(_.at(tiles, arr));\n        })\n    };\n\n    // For each tile, assign the correct lines.\n    _.forEach(tiles, function(tile, index) {\n\n      var mod = index % size,\n          xLine = lines.x[(index - mod) / size],\n          yLine = lines.y[mod];\n\n      tile.updateLines(xLine, yLine);\n    });\n\n    // Return the tiles.\n    return tiles;\n  }\n\n};\n\nexport default Side;\n","import _ from 'lodash';\nimport {events} from '../util/vendor';\nimport {listenOnce} from '../util/util';\n\nfunction Tile(side, index) {\n\n  // Set properties.\n  this.el = this.build(side.id + '-' + index);\n  this.side = side;\n  this.index = index;\n\n  this.claimedBy = null;\n  this.xLine = null;\n  this.yLine = null;\n\n  // Append the tile's element to the side.\n  side.el.appendChild(this.el);\n}\n\nTile.prototype = {\n\n  /**\n   * Outputs useful identifying information for troubleshooting.\n   * @return {String} Tile information.\n   */\n  toString: function() {\n    return this.el.id;\n  },\n\n  build: function(id) {\n\n    // Create the tile element.\n    var el = document.createElement('div');\n    el.id = id;\n    el.className = 'tile';\n\n    // Initialize after a random time. This begins the tile drop animation.\n    window.setTimeout(() => this.addClass('init'), Math.random() * 2000);\n\n    // debug\n    //var idData = id.split('-');\n    //el.appendChild(document.createTextNode(idData[0].slice(0, 2) + idData[1]));\n\n    return el;\n  },\n\n  claim: function(player) {\n    this.claimedBy = player;\n    this\n      .removeClass('unclaimed')\n      .addClass('preclaimed')\n      .addClass(player.tileClass);\n\n    listenOnce(this.el, events.animationEnd, () => {\n      this.removeClass('preclaimed').addClass('claimed');\n    });\n  },\n\n  release: function() {\n    if (this.claimedBy) {\n      this\n        .addClass('unclaimed')\n        .removeClass('claimed')\n        .removeClass(this.claimedBy.tileClass)\n        .removeClass('win');\n      this.claimedBy = null;\n    }\n  },\n\n  isNeighboringSide: function(tile) {\n    return this.side.isNeighbor(tile.side);\n  },\n\n  addClass: function(name) {\n    this.el.classList.add(name);\n    return this;\n  },\n\n  removeClass: function(name) {\n    this.el.classList.remove(name);\n    return this;\n  },\n\n  updateLines: function(x, y) {\n    this.xLine = x;\n    this.yLine = y;\n  },\n\n  /**\n   * @return {Array} All the tiles composing both lines.\n   */\n  getAllLineTiles: function() {\n    return _.union(this.xLine.getTiles(), this.yLine.getTiles());\n  },\n\n  translate: function(toSide) {\n\n    // A translation is a recipe for morphing one line into another.\n    // It looks like this: [1, flip]\n    // Where: The first index is the coordinate to use in a line pair\n    //        The remaining indicies are methods to invoke on the line\n    var translation = Tile.translationMap[this.side.id][toSide ? toSide.id : null],\n\n        // The line from the line pair to use.\n        line = _.first(translation) === 'x' ? this.xLine : this.yLine;\n\n    if (translation) {\n\n      // Run through each translation method (flip, rotate) and return the result.\n      var newLine = _.reduce(_.rest(translation), function(transformedLine, method) {\n        return transformedLine[method]();\n      }, line);\n\n      return toSide.getTiles(newLine.indicies());\n    }\n\n    return null;\n  }\n\n};\n\nTile.translationMap = (function() {\n\n  var X = 'x',\n      Y = 'y',\n      FLIP = 'flip',\n      ROTATE = 'rotate';\n\n  // Line coordinate mapping to side id.\n  // [coordinate, methods...]\n  return {\n\n    front: {\n      top:      [Y],                // top\n      bottom:   [Y],                // bottom\n      left:     [X],                // left\n      right:    [X]                 // right\n    },\n\n    back: {\n      bottom:   [Y, FLIP],          // top\n      top:      [Y, FLIP],          // bottom\n      left:     [X],                // left\n      right:    [X]                 // right\n    },\n\n    top: {\n      back:     [Y, FLIP],          // top\n      front:    [Y],                // bottom\n      left:     [X, ROTATE],        // left\n      right:    [X, FLIP, ROTATE],  // right\n    },\n\n    bottom: {\n      front:    [Y],                // top\n      back:     [Y, FLIP],          // bottom\n      left:     [X, FLIP, ROTATE],  // left\n      right:    [X, ROTATE]         // right\n    },\n\n    left: {\n      top:      [Y, ROTATE],        // top\n      bottom:   [Y, FLIP, ROTATE],  // bottom\n      back:     [X],                // left\n      front:    [X]                 // right\n    },\n\n    right: {\n      top:      [Y, FLIP, ROTATE],  // top\n      bottom:   [Y, ROTATE],        // bottom\n      front:    [X],                // left\n      back:     [X]                 // right\n    }\n  };\n\n}());\n\nexport default Tile;","import _ from 'lodash';\nimport Cube from './cube/cube';\nimport Player from './player';\nimport Bot from './bot';\nimport Renderer from './render/renderer';\nimport Recorder from './recorder';\nimport Messages from './messages';\nimport Tutorial from './tutorial';\nimport {listenOnce} from './util/util';\nimport {events} from './util/vendor';\nimport Tracker from './util/Tracker';\n\n// Instantiate a new Tracker instance which will send the pageview event.\nvar tracker = new Tracker();\n\nfunction Game(containerId) {\n\n  // The site container which houses the cube and intro text.\n  this.container = document.getElementById(containerId);\n\n  // Check if the client is on a mobile device.\n  this.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent);\n\n  // The fun part!\n  this.cube = new Cube(this.container.querySelector('.cube'));\n\n  // UI for displaying various messages.\n  this.messages = new Messages();\n\n  // An object that detects user interaction to manipulate the cube.\n  this.renderer = new Renderer(this.cube, this.isMobile);\n\n  // In-game players.\n  this.players = null;\n  this.currentPlayer = null;\n\n  // Cross-selected tile for helping attacks.\n  this._helperTile = null;\n\n  // Records moves as they're made. Can be used to step through time.\n  this.recorder = new Recorder(this);\n\n  // Listen for user interactions.\n  this.idle();\n}\n\nGame.prototype = {\n\n  /**\n   * Configures the cube object's default pre-game state.\n   */\n  idle: function() {\n\n    var container = this.container,\n        hitbox = container.querySelector('#hit');\n\n    // Click the cube to begin the game.\n    listenOnce(hitbox, 'click', () => {\n\n      hitbox.style.display = 'none';\n      container.classList.add('game');\n      this._initializeTutorial();\n\n      listenOnce(container, events.animationEnd, () => {\n        this.cube\n          .build()\n          .then(_.bind(this.initializeGame, this));\n      });\n    });\n  },\n\n  /**\n   * Configures the cube for game mode by creating players, setting listeners,\n   * and initializing the renderer.\n   */\n  initializeGame: function() {\n\n    // Create the players: A human and a bot.\n    var human = new Player('Player', 'player1', this.cube),\n        bot = new Bot('CPU', 'player2', this.cube, human);\n\n    this.players = [human, bot];\n\n    // Sets the game turns to 0.\n    this.turns = 0;\n\n    // Begin the rendering.\n    this.renderer.initialize();\n\n    // Let's clear the helper tile when the cube is rotating.\n    this.renderer.on('start', _.bind(this.clearHelperTile, this));\n\n    // Set the current player as the first player. This \"officially\" begins the game.\n    this.setCurrentPlayer(_.first(this.players));\n\n    // Fire an event that signals the first game has begun.\n    tracker.sendGameEvent(Tracker.GAME_START);\n  },\n\n  enableCubeInteraction: function() {\n    this.renderer.listenForInput();\n    this.cube\n      .listenTo('click', this._handleClick, this)\n      .listenTo('mouseover', this._handleMouseOver, this)\n      .listenTo('mouseout', this._handleMouseOut, this);\n  },\n\n  disableCubeInteraction: function() {\n    this.renderer.stopListeningForInput();\n    this.cube\n      .stopListeningTo('click')\n      .stopListeningTo('mouseover')\n      .stopListeningTo('mouseout');\n  },\n\n  /**\n   * Sets the current player to the passed player, displaying the correct\n   * messaging and updating the UI state.\n   * @param {Player} player    The player to set as the current player.\n   * @param {Boolean} botManual Should the bot play it's turn automatically?\n   *                            Used in recorder mode to pause auto playback.\n   */\n  setCurrentPlayer: function(player, botManual) {\n\n    // Broadcast that it's the passed player's turn.\n    this.messages.add(player.name + '\\'s turn!', 'alert');\n\n    // Don't set the same player twice.\n    if (this.currentPlayer !== player) {\n\n      this.cube.el.classList.add(player.tileClass + '-turn');\n      if (this.currentPlayer) {\n        this.cube.el.classList.remove(this.currentPlayer.tileClass + '-turn');\n      }\n\n      this.currentPlayer = player;\n\n      // If the player has valid moves, start the turn as usual.\n      if (player.hasValidMoves()) {\n        if (player.isBot()) {\n          this.disableCubeInteraction();\n          if (!botManual) {\n            this._botTileSelection(player.play());\n          }\n        }\n        else {\n          this.enableCubeInteraction();\n        }\n      }\n\n      // Otherwise, declare a stalemate. Nobody wins.\n      else {\n        this._stalemate()\n      }\n    }\n  },\n\n  getOpponent: function(player) {\n    return this.players[this.players.indexOf(player) === 1 ? 0 : 1];\n  },\n\n  showCrosshairs: function(tile) {\n    tile.addClass('selected');\n    this.cube.updateCrosshairs(tile, tile => tile.addClass('highlighted'));\n  },\n\n  hideCrosshairs: function(tile) {\n    tile.removeClass('selected');\n    this.cube.updateCrosshairs(tile, tile => tile.removeClass('highlighted'));\n  },\n\n  clearHelperTile: function() {\n    if (this._helperTile) {\n      this._helperTile.removeClass('helper');\n    }\n    this._helperTile = null;\n  },\n\n  /**\n   * Instantiates a tutorial instance and hooks into methods that should\n   * emit lesson messages.\n   */\n  _initializeTutorial: function() {\n    this.tutorial = new Tutorial();\n    this.tutorial\n      .hook(this, 'initializeGame', 'start')\n      .hook(this, 'showCrosshairs', 'click')\n      .hook(this, '_endTurn', 'turn');\n    this.messages.listenTo(this.tutorial);\n  },\n\n  /**\n   * Ends the current player's turn and determines if the game is\n   * in a win state.\n   * @param  {Array} tiles The tiles selected to end the turn.\n   */\n  _endTurn: function(tiles) {\n\n    var player = this.currentPlayer,\n        lines = player.getWinLines();\n\n    this.turns++;\n    this.recorder.record(player, tiles);\n    this.clearHelperTile();\n    this.hideCrosshairs(_.first(tiles));\n\n    // If the player has made at least one line, end the game.\n    if (!this._endGame(lines)) {\n      this.setCurrentPlayer(this.getOpponent(player));\n    }\n  },\n\n  /**\n   * Attempts to end the game.\n   * @param  {Array} lines The lines used to win.\n   * @return {Boolean} Is the game in a win state?\n   */\n  _endGame: function(lines) {\n\n    var winBy = lines.length,\n        modifier;\n\n    if (winBy) {\n\n      // Display message with modifier.\n      modifier = winBy > 1 ? ' x' + winBy + '!' : '!';\n      this.messages.add(`${this.currentPlayer.name} wins${modifier}`, 'alert persist');\n\n      // Send an event describing the win state.\n      tracker.sendGameEvent(this.currentPlayer.isBot() ? Tracker.GAME_BOT_WIN : Tracker.GAME_PLAYER_WIN, this.turns);\n\n      // Show the winning lines.\n      _.invoke(lines, 'pulsate');\n\n      // Alert the user on how to start a new game.\n      this._waitAndListenForReset();\n\n      // Yes, the game has ended.\n      return true;\n    }\n\n    // Nobody has won yet. Continue!\n    return false;\n  },\n\n  /**\n   * Reveal messages regarding the stalemate and begin listening to\n   * start a new game.\n   */\n  _stalemate: function() {\n    this.messages\n      .add('stalemate', 'alert persist')\n      .add(`${this.currentPlayer.name} has no valid moves.`, 'persist');\n    this._waitAndListenForReset();\n    tracker.sendGameEvent(Tracker.GAME_STALEMATE);\n  },\n\n  /**\n   * After a brief pause, alerts the user about how to start a new game\n   * and sets a listener.\n   */\n  _waitAndListenForReset: function() {\n\n    // Remove the current player and disable cube interactions.\n    this.currentPlayer = null;\n    this.disableCubeInteraction();\n\n    // After two seconds, display a message to begin a new game and\n    // listen for document clicks to reset.\n    setTimeout(() => {\n      this.messages.add('newGame', 'persist');\n      listenOnce(document, 'click', _.bind(this._resetGameState, this));\n    }, 2000);\n  },\n\n  /**\n   * Removes all claimed tiles from each player and destroys all messages.\n   * Sets the current player to the first player in the array.\n   */\n  _resetGameState: function() {\n\n    this.messages.removeAll();\n    this.cube.el.classList.add('reset');\n    tracker.sendGameEvent(Tracker.GAME_RESET);\n\n    this.renderer.setSyncMovement(450, 450).then(() => {\n      _.forEach(this.players, player => player.releaseAll());\n      this.cube.el.classList.remove('reset');\n      this.setCurrentPlayer(_.first(this.players));\n      this.turns = 0;\n    });\n  },\n\n  // Potentially dangerous as this is hackable...\n  // Perhaps do a straight-up element match too?\n  _getTileFromElement: function(el) {\n    var data;\n    if (el.classList.contains('tile')) {\n      data = el.id.split('-');\n      return this.cube.getSides(data[0]).getTiles(data[1])[0];\n    }\n    return null;\n  },\n\n  /**\n   * Claimes all the tiles the bot has selected and updates the UI using a\n   * flow the user is familiar with.\n   * @param  {Array} tiles The tiles the bot has selected.\n   */\n  _botTileSelection: function(tiles) {\n\n    /**\n     * A simple function that returns a promise after after the bot is\n     * finished 'thinking'.\n     * @return {Promise} A promise resolved after a set period of time.\n     */\n    var wait = () => {\n      return new Promise(resolve => {\n        setTimeout(resolve, Bot.THINKING_SPEED);\n      });\n    };\n\n    // Wait a moment before running through the selection UI updates, which\n    // include rotating the cube to display all the tiles, showing crosshairs\n    // for the first tile, and then claiming all before ending the turn.\n    wait()\n      .then(() => this.cube.rotateToTiles(tiles))\n      .then(wait)\n      .then(() => this.showCrosshairs(tiles[0]))\n      .then(wait)\n      .then(() => {\n        this.currentPlayer.claimAll();\n        this._endTurn(tiles);\n      });\n  },\n\n  _handleClick: function(evt) {\n\n    // Get the target element from the event.\n    var tile = this._getTileFromElement(evt.target);\n\n    // If the tile exists, try to select it.\n    if (tile) {\n      this.currentPlayer\n        .selectTile(tile, this._helperTile)\n\n        // On success, react based on the number of tiles currently selected.\n        .success(data => {\n\n          // Cache the selected tiles.\n          var selected = data.selected,\n              length = selected && selected.length;\n\n          if (data.deselect) {\n            this.hideCrosshairs(data.deselect[0]);\n          }\n\n          if (length === 1) {\n            this.showCrosshairs(selected[0]);\n          }\n          else if (length === 3) {\n            this.currentPlayer.claimAll();\n            this._endTurn(selected);\n          }\n        })\n\n        // On failure, display a message based on the failure code.\n        .failure(code => this.messages.add(code, 'error'));\n    }\n  },\n\n  _handleMouseOver: function(evt) {\n\n    // The tile the user is interacting with.\n    var tile = this._getTileFromElement(evt.target),\n\n        // The first tile that has been selected.\n        initialTile = this.currentPlayer.getInitialTile();\n\n    // If the user is hovering on a neighboring side of the initial tile,\n    // highlight some targeting help on a visible side.\n    this._helperTile = this.cube.getAttackTile(tile, initialTile);\n\n    if (this._helperTile) {\n      this._helperTile.addClass('helper');\n    }\n  },\n\n  _handleMouseOut: function(evt) {\n    this.clearHelperTile();\n  }\n\n};\n\nexport default Game;\n","import _ from 'lodash';\nimport {events} from './util/vendor';\n\nfunction Messages() {\n  this.delay = 100;\n  this.queue = [];\n  this.container = this._buildContainer();\n  this.container.addEventListener(events.animationEnd, _.bind(this._remove, this));\n}\n\nMessages.prototype = {\n\n  listenTo: function(source) {\n    source.on('message', _.bind(this.add, this));\n  },\n\n  /**\n   * Creates a new message to add to the queue.\n   * @param {String|Array[String]} message The message text or an array of messages.\n   * @param {[String]} classes A space-separated list of classes to append to the message.\n   * @return {Messages} Returns itself for chaining.\n   */\n  add: function(message, classes) {\n\n    // Format the message as an array if not already.\n    message = _.isArray(message) ? message : [message];\n\n    // Generate a message item for each message.\n    // If the text matches a LIST key, use the key's value.\n    _.forEach(message, text => {\n      this._generateItem(Messages.LIST[text] || text, classes);\n    });\n\n    return this;\n  },\n\n  /**\n   * Removes all persisted messages from the queue by adding the 'hide'\n   * class to each one.\n   */\n  removeAll: function() {\n    _.forEach(this.container.children, item => item.classList.add('hide'));\n  },\n\n  /**\n   * Generates a message element and queues it up for display.\n   * @param  {String} message The message to display.\n   * @param  {[String]} classes A space-separated list of classes to append to the message.\n   */\n  _generateItem: function(message, classes) {\n\n    // Generate a new element to contain the message.\n    var item = document.createElement('li');\n\n    // Add special classes to decorate the message if passed. We want to use apply here \n    // because add takes multiple arguments, not an array of names.\n    if (classes) {\n      DOMTokenList.prototype.add.apply(item.classList, classes.split(' '));\n    }\n\n    // Append the message to the new element and queue it up.\n    item.appendChild(document.createTextNode(message));\n    this._enqueue(item);\n  },\n\n  _enqueue: function(item) {\n\n    var container = this.container,\n        queue = this.queue,\n        delay = queue.length * this.delay;\n\n    queue.push(item);\n\n    _.delay(function(i) {\n      container.appendChild(item);\n      if (_.last(queue) === i) {\n        queue.length = 0;\n      }\n    }, delay, item);\n  },\n\n  /**\n   * Removes a message item referenced by the passed animationend event.\n   * The message will be removed if it's not persistent or it contains\n   * the 'hide' class.\n   * @param  {animationend} evt An animationend event.\n   */\n  _remove: function(evt) {\n    var classList = evt.target.classList;\n    if (!classList.contains('persist') || classList.contains('hide')) {\n      this.container.removeChild(evt.target);\n    }\n  },\n\n  _buildContainer: function() {\n    var container = document.createElement('ul');\n    container.id = 'messages';\n    document.body.appendChild(container);\n    return container;\n  }\n\n};\n\nMessages.LIST = {\n  claimed: 'This tile is already claimed!',\n  targetClaimed: 'The attack target is already claimed by you!',\n  cannotAttack: 'You cannot attack your own tile!',\n  sameSide: 'Same side! Choose a tile on a different side.',\n  notNeighbor: 'Not a neighboring side! Choose a tile different side.',\n  stalemate: 'Stalemate!',\n  newGame: 'Click anywhere to begin a new game.'\n};\n\nexport default Messages;\n","import _ from 'lodash';\nimport Bot from './bot';\nimport TileSelector from './selection/TileSelector';\nimport CubeCache from './selection/CubeCache';\n\nfunction Player(name, tileClass, cube) {\n  this.name = name;\n  this.tileClass = tileClass;\n  this._selector = new TileSelector(this);\n  this._cubeCache = new CubeCache(cube);\n}\n\nPlayer.prototype = {\n\n  isBot: function() {\n    return this instanceof Bot;\n  },\n\n  claim: function(tile) {\n    tile.claim(this);\n    this._cubeCache.add(tile);\n  },\n\n  release: function(tile) {\n    this._cubeCache.remove(tile);\n    tile.release();\n  },\n\n  releaseAll: function() {\n    _.forEach(this._cubeCache.getAllTiles(), tile => tile.release());\n    this._cubeCache.initialize();\n  },\n\n  getLines: function() {\n    return this._cubeCache.getLines();\n  },\n\n  /**\n   * @return {Array[Tile]} All the tiles claimed that do not compose lines.\n   */\n  getSingles: function() {\n    return this._cubeCache._singles;\n  },\n\n  /**\n   * @return {Tile} The first tile selected to be claimed.\n   */\n  getInitialTile: function() {\n    return this._selector.getInitial();\n  },\n\n  getAttackTile: function(tile1, tile2) {\n    return this._cubeCache._cube.getAttackTile(tile1, tile2);\n  },\n\n  /**\n   * Win lines are completed lines. This method returns all the win\n   * lines claimed by the player.\n   * @return {Array} A collection of this player's win lines.\n   */\n  getWinLines: function() {\n    var size = this._cubeCache._cube.size;\n    return _.filter(this.getLines(), function(line) {\n      return line.length() === size;\n    });\n  },\n\n  /**\n   * Dictates whether or not the player can attack the given tile.\n   * Basically, as long as the tile is not claimed by the player and\n   * is not some barrier, the tile can be attacked.\n   * @param  {Tile} tile The tile to check.\n   * @return {Boolean} Can the given tile be attacked by this player?\n   */\n  canAttack: function(tile) {\n    return tile.claimedBy !== this;\n  },\n\n  selectTile: function(tile, attackTile) {\n    return this._selector.validate(tile, attackTile);\n  },\n\n  claimAll: function() {\n\n    _.forEach(this._selector._selected, function(tile, index, array) {\n\n      // If the tile is already claimed, this is an attack! Release it.\n      // Also, replace it with attack data so the recorder will work.\n      if (tile.claimedBy) {\n        array[index] = this._createAttackData(tile);\n        tile.claimedBy.release(tile);\n      }\n\n      // Otherwise, claim that sucker.\n      else {\n        this.claim(tile);\n      }\n    }, this);\n\n    this._selector.reset();\n  },\n\n  /**\n   * Checks to see if the player has at least one valid move.\n   * Resets the selector after performing the check.\n   * @return {Boolean} Does a valid move exist?\n   */\n  hasValidMoves: function() {\n    var hasMove = this.selectRandom();\n    this._selector.reset();\n    return hasMove;\n  },\n\n  /**\n   * Makes a random valid selection.\n   * @return {Boolean} Was a valid selection made?\n   */\n  selectRandom: function() {\n\n    /**\n     * Given a starting tile, attempt to match two more: a secondary tile\n     * and the attack tile.\n     * @param  {Tile} initial The starting tile to test.\n     * @return {Boolean} Was a successful match made?\n     */\n    var attempt = initial => {\n\n        // Loop through the tiles until two more selections are valid.\n        // If no matches are found, the attempt fails and returns false.\n        return _.some(tiles, tile => {\n\n          // Get the attack tile from the initial and tile intersection.\n          var attackTile = this.getAttackTile(initial, tile);\n\n          // If the attack tile and loop tile are valid, we're good!\n          return attackTile && selector.validate(tile, attackTile).success();\n        });\n      },\n\n      // Cached reference to the player's selector.\n      selector = this._selector,\n\n      // The initial tile, if available. Otherwise undefined.\n      initial = selector.getInitial(),\n\n      // An array of all the available tiles for this player.\n      tiles = this._cubeCache._cube.getAvailableTiles(initial);\n\n    // If an initial tile is available and a match can be found, return true.\n    // This functionality is used by the bot in the last resort selection.\n    if (initial && attempt(initial)) {\n      return true;\n    }\n\n    // Run through all the tiles and try to find a match.\n    // If no match is found, false is returned.\n    return _.some(tiles, tile => {\n\n      // Reset the selector for a new starting point.\n      selector.reset();\n\n      // If the new tile is valid and the attempt to find two more succeeds,\n      // there is at least one valid move and true will be returned.\n      return selector.validate(tile).success() && attempt(tile);\n    });\n  },\n\n  _createAttackData: function(tile) {\n    return {\n      player: tile.claimedBy,\n      tile: tile,\n      toString: function() {\n        return '(attack -> ' + tile.toString() + ')'\n      }\n    };\n  }\n\n};\n\n_.assign(Bot.prototype, Player.prototype);\n\nexport default Player;\n","import _ from 'lodash';\nimport Tile from './cube/tile';\n\nfunction Recorder(app) {\n  this._timeline = [];\n  this._cursor = 0;\n  this._app = app;\n}\n\nRecorder.MESSAGES = {\n  NOT_FOUND: 'Could not locate a turn at ',\n  REWRITE: 'Turns are now being rewritten as the timeline was behind by ',\n  NO_LOG: '[No log for this turn]'\n};\n\nRecorder.prototype = {\n\n  record: function(player, tiles) {\n\n    var behind = this._timeline.length - this._cursor;\n\n    if (behind) {\n      console.warn(Recorder.MESSAGES.REWRITE + behind);\n      this._timeline = _.dropRight(this._timeline, behind);\n    }\n\n    this._package(player, tiles);\n    this._cursor++;\n  },\n\n  forward: function() {\n\n    var turnData = this._timeline[this._cursor];\n\n    if (turnData) {\n      _.forEach(turnData.tiles, function(tile) {\n        if (tile instanceof Tile) {\n          turnData.player.claim(tile);\n        }\n        else {\n          tile.player.release(tile.tile);\n        }\n      });\n      console.log(turnData.log);\n      this._cursor++;\n      this._app.setCurrentPlayer(this._app.getOpponent(turnData.player), true);\n    }\n    else {\n      throw Recorder.MESSAGES.NOT_FOUND + this._cursor;\n    }\n  },\n\n  reverse: function() {\n\n    var turnData = this._timeline[this._cursor - 1];\n\n    if (turnData) {\n      _.forEach(turnData.tiles, function(tile) {\n        if (tile instanceof Tile) {\n          turnData.player.release(tile);\n        }\n        else {\n          tile.player.claim(tile.tile);\n        }\n      });\n      this._cursor--;\n      this._app.setCurrentPlayer(turnData.player, true);\n    }\n    else {\n      throw Recorder.MESSAGES.NOT_FOUND + this._cursor;\n    }\n  },\n\n  _package: function(player, tiles) {\n    this._timeline.push({\n      player: player,\n      tiles: tiles,\n      log: player._logText || Recorder.MESSAGES.NO_LOG\n    });\n  }\n\n};\n\nexport default Recorder;\n","import _ from 'lodash';\n\n/**\n * A software interface for determining which keyboard keys are pressed.\n *\n * @param {Array || String} keyCodes A collection of all the (string) keyCodes used.\n */\nfunction Keyboard(keyCodes, speed) {\n\n  this.speed = speed;\n\n  // If the keyCodes are a string, split them into an array.\n  if (typeof keyCodes === 'string') {\n    keyCodes = keyCodes.split(' ');\n  }\n\n  // Loop through the codes and set them as keys.\n  this.keys = _.reduce(keyCodes, (collection, code) => {\n    collection[code] = false;\n    return collection;\n  }, {});\n}\n\nKeyboard.prototype = { \n\n  /**\n   * Creates and binds keyboard listener handlers for interactions.\n   * @param  {Function} callback A method to call from within the handlers.\n   * @param  {Object} context The object that will listen for keyboard events.\n   */\n  listen: function(callback, context = window) {\n\n    /**\n     * Creates a function bound to this Keyboard instance that\n     * partially includes the callback argument.\n     * @param  {Function} handler The core function that will be invoked.\n     * @return {Function} A new bound and filled function.\n     */\n    var generateHandler = handler => _.bind(_.partialRight(handler, callback), this);\n\n    // Configure bound listener handlers to ease removing later.\n    this._boundHandleKeydown = generateHandler(this._handleKeydown);\n    this._boundHandleKeyup = generateHandler(this._handleKeyup);\n\n    // Listen for keyup and keydown to trigger interactions.\n    context.addEventListener('keydown', this._boundHandleKeydown);\n    context.addEventListener('keyup', this._boundHandleKeyup);\n  },\n\n  /**\n   * Remove keyboard event listeners.\n   * @param  {Object} context The object to remove the listeners from.\n   */\n  stopListening: function(context = window) {\n    context.removeEventListener('keydown', this._boundHandleKeydown);\n    context.removeEventListener('keyup', this._boundHandleKeyup);\n  },\n\n  getMovement: function() {\n\n    var KB = Keyboard,\n        keys = this.keys,\n        x = 0,\n        y = 0;\n\n    // Detect either up or down movement.\n    if (keys[KB.UP] || keys[KB.W]) {\n      x = this.speed;\n    }\n    else if (keys[KB.DOWN] || keys[KB.S]) {\n      x = -this.speed;\n    }\n\n    // Detect either left or right movement.\n    if (keys[KB.LEFT] || keys[KB.A]) {\n      y = this.speed;\n    }\n    else if (keys[KB.RIGHT] || keys[KB.D]) {\n      y = -this.speed;\n    }\n\n    return {x, y};\n  },\n\n  _handleKeydown: function(evt, callback) {\n\n    var keyCode = evt.keyCode,\n        keys = this.keys;\n\n    if (!_.isUndefined(keys[keyCode]) && !keys[keyCode]) {\n      keys[keyCode] = true;\n      if (callback) {\n        callback();\n      }\n    }\n  },\n\n  _handleKeyup: function(evt, callback) {\n\n    var keyCode = evt.keyCode;\n\n    if (this.keys[keyCode]) {\n      this.keys[keyCode] = false;\n      if (callback) {\n        callback();\n      }\n    }\n  }\n\n};\n\n// Keyboard constants referencing keyCodes.\nKeyboard.UP = '38';\nKeyboard.DOWN = '40';\nKeyboard.LEFT = '37';\nKeyboard.RIGHT = '39';\nKeyboard.W = '87';\nKeyboard.A = '65';\nKeyboard.S = '83';\nKeyboard.D = '68';\nKeyboard.SPACE = '32';\nKeyboard.ESCAPE = '27';\n\nexport default Keyboard;\n","import _ from 'lodash';\nimport {EventEmitter} from 'events';\nimport Keyboard from './keyboard';\nimport Touch from './touch';\n\nfunction Renderer(cube, isMobile) {\n\n  // A reference to the game cube.\n  this.cube = cube;\n\n  // The keyboard interface for desktop interactions.\n  this.keyboard = null;\n\n  // And this is for touch interactions.\n  this.touch = null;\n\n  // The speed to animate the X axis.\n  this.moveX = 0;\n\n  // The speed to animate the Y axis.\n  this.moveY = 0;\n\n  // The total number of steps to animate a rotation.\n  this.tickMax = 90;\n\n  // The number of rendering steps left to animate.\n  this.tick = 0;\n\n  // How fast each tick animates.\n  this.speed = 5;\n\n  // Is the client a mobile device?\n  this.isMobile = isMobile;\n}\n\nRenderer.prototype = {\n\n  initialize: function() {\n\n    if (this.isMobile) {\n      this._input = new Touch(this.speed);\n    }\n    else {\n      this._input = new Keyboard([\n        Keyboard.UP,\n        Keyboard.DOWN,\n        Keyboard.LEFT,\n        Keyboard.RIGHT,\n        Keyboard.W,\n        Keyboard.A,\n        Keyboard.S,\n        Keyboard.D\n      ], this.speed);\n    }\n\n    this.cube.setRenderer(this);\n  },\n\n  /**\n   * Stops the input listening function from calculating a render.\n   */\n  listenForInput: function() {\n    this._input.listen(this._movementListener.bind(this));\n  },\n\n  /**\n   * Allows the input listening function to calculate renders.\n   */\n  stopListeningForInput: function() {\n    this._input.stopListening();\n  },\n\n  draw: function() {\n\n    // Reduce the ticks and rotate the cube\n    this.tick -= this.speed;\n    this.cube.rotate(this.moveX, this.moveY);\n\n    // If there are ticks left or a key is down, keep looping.\n    if (this.tick > 0 || this._setMovementFromInput()) {\n      this._loop();\n    }\n\n    // Otherwise, broadcast an event signifying that the rendering has completed.\n    else {\n      this.emit('end');\n    }\n  },\n\n  /**\n   * A public interface for manually setting the movement.\n   * @param {Number} x The target x coordinate.\n   * @param {Number} y The target y coordinate.\n   * @return {Promise} A promise that resolves when the movement animation ends.\n   */\n  setMovement: function(x, y) {\n\n    /**\n     * Configure a move in one direction and start the render loop.\n     * @param {Number} tick The distance to rotate.\n     * @param {String} coorProp Which coordinate to rotate on (moveX or moveY).\n     */\n    var move = (tick, coorProp) => {\n      this.tick = Math.abs(tick);\n      this[coorProp] = !tick ? 0 : tick < 0 ? -this.speed : this.speed;\n      this._loop();\n    };\n\n    // Return a promise that will resolve when both x and y movements are complete.\n    return new Promise(resolve => {\n      move(x, 'moveX');\n      this.once('end', () => {\n        move(y, 'moveY');\n        this.once('end', resolve);\n      });\n    });\n  },\n\n  setSyncMovement: function(x = 0, y = 0) {\n\n    var speed = this.speed;\n\n    return new Promise(resolve => {\n      this.tick = Math.max(x, y);\n      this.moveX = x === 0 ? 0 : x < 0 ? -speed : speed;\n      this.moveY = y === 0 ? 0 : y < 0 ? -speed : speed;\n      this._loop();\n      this.once('end', resolve);\n    });\n  },\n\n  _loop: function() {\n    window.requestAnimationFrame(this.draw.bind(this));\n  },\n\n  _movementListener: function() {\n    if (this.tick <= 0 && this._setMovementFromInput()) {\n      this._loop();\n      this.emit('start');\n    }\n  },\n\n  _setMovementFromInput: function() {\n\n    var movement = this._input.getMovement();\n    this.moveX = movement.x;\n    this.moveY = movement.y;\n\n    // If there is movement, set tick and return true.\n    if (this.moveX !== 0 || this.moveY !== 0) {\n      this.tick = this.tickMax;\n      return true;\n    }\n\n    // Movement was not set.\n    return false;\n  }\n\n};\n\n// Mixin the EventEmitter methods for great justice.\n// Ditch when we migrate to Browserify.\n_.assign(Renderer.prototype, EventEmitter.prototype);\n\nexport default Renderer;\n","import _ from 'lodash';\nimport Hammer from 'hammerjs';\n\nfunction Touch(speed) {\n  this.speed = speed;\n  this.queue = [];\n  this.iface = new Hammer(document.body);\n\n  // Configure the swipe gesture.\n  this.iface\n    .get('swipe')\n    .set({\n      direction: Hammer.DIRECTION_ALL,\n      threshold: 0.1,\n      velocity: 0.1\n    });\n}\n\nTouch.prototype = {\n\n  listen: function(callback) {\n    this._boundHandleSwipe = _.bind(_.partialRight(this._handleSwipe, callback), this);\n    this.iface.on('swipe', this._boundHandleSwipe);\n  },\n\n  stopListening: function() {\n    this.iface.off('swipe', this._boundHandleSwipe);\n  },\n\n  getMovement: function() {\n\n    var movement = this.queue.shift(),\n        x = 0,\n        y = 0;\n\n    switch (movement) {\n      case Touch.UP:\n        x = -this.speed;\n        break;\n      case Touch.DOWN:\n        x = this.speed;\n        break;\n      case Touch.LEFT:\n        y = this.speed;\n        break;\n      case Touch.RIGHT:\n        y = -this.speed;\n        break;\n    }\n\n    return {x, y};\n  },\n\n  _handleSwipe: function(evt, callback) {\n    this.queue.push(evt.offsetDirection);\n    if (callback) {\n      callback();\n    }\n  }\n\n};\n\nTouch.UP = Hammer.DIRECTION_UP;\nTouch.DOWN = Hammer.DIRECTION_DOWN;\nTouch.LEFT = Hammer.DIRECTION_LEFT;\nTouch.RIGHT = Hammer.DIRECTION_RIGHT;\n\nexport default Touch;\n","import _ from 'lodash';\nimport Line from '../cube/line';\n\nfunction CubeCache(cube) {\n\n  // A reference to the cube.\n  this._cube = cube;\n\n  // Create cache objects to hold claimed tiles.\n  this.initialize();\n}\n\nCubeCache.prototype = {\n\n  /**\n   * Called on instantiation and reset, this initialize a fresh cache\n   * in two collecitons: An object keyed by cube side id to contain lines\n   * and an array to contain single tiles.\n   */\n  initialize: function() {\n\n    // A collection of lines created by side.\n    this._lineMap = _.reduce(this._cube.getSides(), (sides, side, id) => {\n      sides[id] = [];\n      return sides;\n    }, {});\n\n    // A collection of claimed tiles that are not part of lines.\n    this._singles = [];\n  },\n\n  add: function(tile) {\n\n    var claimedBy = tile.claimedBy,\n        xPartial = this._getPartialLineTiles(tile.xLine, claimedBy),\n        yPartial = this._getPartialLineTiles(tile.yLine, claimedBy),\n        xGrow = this._growLine(xPartial),\n        yGrow = this._growLine(yPartial);\n\n    // If a line was grown or created from this tile, ensure it's removed from\n    // the singles collection.\n    if (xGrow || yGrow) {\n      this._singles = _.difference(this._singles, tile.getAllLineTiles());\n    }\n\n    // Else, add the tile to the singles collection.\n    else {\n      this._singles.push(tile);\n    }\n  },\n\n  remove: function(tile) {\n\n    var claimedBy = tile.claimedBy,\n        xPartial = this._getPartialLineTiles(tile.xLine, claimedBy),\n        yPartial = this._getPartialLineTiles(tile.yLine, claimedBy),\n        xShrink,\n        yShrink;\n\n    _.pull(xPartial, tile);\n    _.pull(yPartial, tile);\n\n    xShrink = this._shrinkLine(xPartial, true);\n    yShrink = this._shrinkLine(yPartial, false);\n\n    // If there's some shrinkage, update the singles collection accordingly.\n    if (xShrink || yShrink) {\n\n      // We need to make sure that the tiles gathered in the partial are\n      // not part of another line. If they are, don't add them as singles.\n      if (xShrink && !this._composesLines(xPartial)) {\n        this._singles = _.union(this._singles, xPartial);\n      }\n      if (yShrink && !this._composesLines(yPartial)) {\n        this._singles = _.union(this._singles, yPartial);\n      }\n    }\n\n    // Otherwise, safely remove the tile from the singles collection\n    // if it exists in there.\n    else {\n      _.pull(this._singles, tile);\n    }\n  },\n\n  /**\n   * Retrieves all the lines, sorted by the number of tiles contained\n   * in each line.\n   * @return {Array} A collection of lines.\n   */\n  getLines: function() {\n    return this._getLinesAsChain()\n      .sortBy(line => line._tiles.length)\n      .value();\n  },\n\n  /**\n   * Retrieves all cached tiles.\n   * @return {Array} A colleciton of all the cached tiles.\n   */\n  getAllTiles: function() {\n    return this._getLinesAsChain()\n      .map(line => line.getTiles())\n      .flatten()\n      .uniq()\n      .concat(this._singles)\n      .value();\n  },\n\n  /**\n   * Fetches a chain-wrapped collection of cached lines, flattened and\n   * compacted into one array.\n   * @return {lodash} A lodash chain-wrapped collection.\n   */\n  _getLinesAsChain: function() {\n    return _.chain(this._lineMap)\n      .values()\n      .flatten()\n      .compact()\n  },\n\n  _getPartialLineTiles: function(line, claimedBy) {\n    return _.filter(line.getTiles(), tile => tile.claimedBy === claimedBy);\n  },\n\n  _growLine: function(tiles) {\n\n    var side, line;\n\n    if (tiles.length > 1) {\n\n      side = this._lineMap[_.first(tiles).side.id];\n      line = _.find(side, function(ln) {\n        return ln.some(tiles);\n      });\n\n      // If a line exists already, update it with the new tiles.\n      if (line) {\n        line.update(tiles);\n      }\n\n      // Otherwise, create a new line with the given tiles.\n      else {\n        side.push(new Line(tiles));\n      }\n\n      // A line was created or updated.\n      return true;\n    }\n\n    // A line was not created.\n    return false;\n  },\n\n  /**\n   * Shrinks a line.\n   * @param  {Array} tiles The tiles used in the shrinkage\n   * @return {Boolean} Was a line disassebled?\n   */\n  _shrinkLine: function(tiles, isHorizontal) {\n\n    var side, line;\n\n    if (tiles.length) {\n\n      side = this._lineMap[_.first(tiles).side.id];\n      line = _.find(side, function(ln) {\n        return ln.isHorizontal() === isHorizontal && ln.all(tiles);\n      });\n\n      // Line should exist but just in case...\n      if (line) {\n\n        // If there's only one tile, it's not a line. Pull it.\n        if (tiles.length === 1) {\n          _.pull(side, line);\n\n          // A line was disassembled. Return true.\n          return true;\n        }\n\n        // Otherwise, update the line with the remaining tiles.\n        else {\n          line.update(tiles);\n        }\n      }\n    }\n\n    // A line was not disassembled.\n    return false;\n  },\n\n  _composesLines: function(tiles) {\n    var side = this._lineMap[_.first(tiles).side.id];\n    return _.find(side, function(line) {\n      return line.all(tiles);\n    });\n  }\n\n};\n\nexport default CubeCache;","import _ from 'lodash';\nimport TileSelectorResult from './TileSelectorResult';\n\n/**\n * Instances of this class are used for making valid tile selections\n * and returning results containing data describing the selections.\n * The validate method is the core of TileSelector and is mostly used\n * inside the Player.selectTile wrapper.\n */\nclass TileSelector {\n\n  /**\n   * Constructor method. This sets an internal _player property which is\n   * only currently used once (in the attack portion of validate). It also\n   * sets the _selected property as an empty array via reset().\n   * @param  {Player} player The player bound to this TileSelector instance.\n   * @constructor\n   */\n  constructor(player) {\n    this._player = player;\n    this.reset();\n  }\n\n  /**\n   * Resets the _selected array to it's initial empty state.\n   */\n  reset() {\n    this._selected = [];\n  }\n\n  /**\n   * Removes the last n selections and returns the updated _selected array.\n   * @param  {Number} n The number of selections to revert.\n   * @return {Array} The updated _selected array.\n   */\n  revert(n = 1) {\n    var slice = _.dropRight(this._selected, n);\n    this._selected = slice;\n    return slice;\n  }\n\n  /**\n   * Retrieves the contents of the _selected array.\n   * @return {Array} The _selected array.\n   */\n  getSelected() {\n    return this._selected;\n  }\n\n  /**\n   * Retrieves the first item in the _selected array.\n   * @return {Tile} The initial selected tile.\n   */\n  getInitial() {\n    return _.first(this._selected);\n  }\n\n  /**\n   * Computes whether or not the passed tile or tiles are valid selections.\n   * Different test cases include:\n   * - Was a tile passed?\n   * - Is the tile already claimed?\n   * - Is there an initial tile? Should it be deselected? Is it a neighbor?\n   * - Was an attack tile passed? Is it a valid target?\n   * @param {Tile} tile A tile to validate.\n   * @param {Tile} attackTile Another tile to validate.\n   * @return {TileSelectorResult} A result object containing data describing the action.\n   */\n  validate(tile, attackTile) {\n\n    // Get a reference to the first tile selected.\n    var initial = this.getInitial(),\n\n        // A package of data sent in resolved promises.\n        resolveData = {};\n\n    // If a tile wasn't passed, exit immediately.\n    if (!tile) {\n      return TileSelectorResult.failure();\n    }\n\n    // If the tile is already claimed, get outta dodge.\n    if (tile.claimedBy) {\n      return TileSelectorResult.failure(TileSelectorResult.FAILURE_CLAIMED);\n    }\n\n    // If an initial tile exists, run some tests.\n    if (initial) {\n\n      // If the initial tile is selected, deselected it and bail out.\n      if (tile === initial) {\n        return TileSelectorResult.success(\n          this._deselect(tile)\n        );\n      }\n\n      // If the new selected tile is on the same side as the\n      // initial tile, deselect the initial tile.\n      if (tile.side === initial.side) {\n        resolveData = this._deselect(initial);\n      }\n\n      // Else, if the side selected is not a neighbor, bail out.\n      else if (!initial.isNeighboringSide(tile)) {\n        return TileSelectorResult.failure(TileSelectorResult.FAILURE_NOT_NEIGHBOR);\n      }\n    }\n\n    // If the attack tile exists, run even more tests.\n    if (attackTile) {\n\n      // If the attack tile is valid, that means both tiles can be selected\n      // and everything can be claimed. Exit true as we're done selecting tiles.\n      if (this._player.canAttack(attackTile)) {\n        return TileSelectorResult.success(\n          _.merge(resolveData, this._select(tile, attackTile))\n        );\n      }\n      else {\n        return TileSelectorResult.failure(TileSelectorResult.FAILURE_CANNOT_ATTACK);\n      }\n    }\n\n    // Otherwise, the initial tile must have been selected. Pass the resolve data\n    // along in case a tile was deselected first (as in the side === side case).\n    else {\n      return TileSelectorResult.success(\n        _.merge(resolveData, this._select(tile))\n      );\n    }\n\n    // We'll probably never make it this far but let's return a promise just in case.\n    return TileSelectorResult.failure();\n  }\n\n  /**\n   * Adds tiles to the _selected array and returns a command object containing\n   * the complete _selected array contents.\n   * @param {Tile...} Any number of Tile objects that were selected.\n   * @return {Object} A command object describing the action.\n   */\n  _select() {\n    var tiles = _.toArray(arguments);\n    Array.prototype.push.apply(this._selected, tiles);\n    return {\n      selected: this._selected\n    };\n  }\n\n  /**\n   * Removes a tile from the _selected array and returns a command object\n   * describing the action. This object will eventually be passed to a\n   * Promise returned from validate().\n   * @param  {Tile} tile The tile to remove.\n   * @return {Object} A command object describing the action.\n   */\n  _deselect(tile) {\n    _.pull(this._selected, tile);\n    return {\n      deselect: [tile]\n    };\n  }\n\n}\n\nexport default TileSelector;\n","/**\n * Used in TileSelector, the TileSelectorResult object provides an\n * easy to use API for interacting with validate calls.\n * In general, these objects should be created with the static methods.\n *\n * Common use cases with TileSelector:\n *\n * var selector = new TileSelector(player);\n *\n * 1.\n * selector.validate(tile).success() -> Returns a boolean\n *\n * 2.\n * selector\n *   .validate(tile)\n *   .success(function(data) {\n *     // Do something with success data.\n *   })\n *   .failure(function(code) {\n *     // React to error code.\n *   });\n */\nclass TileSelectorResult {\n\n  /**\n   * Constructor method. Sets properties intended to be private.\n   * @param  {Boolean} success Is the result successful?\n   * @param  {String|Object} data A payload describing the result.\n   *                              Strings for failure codes and objects for result metadata.\n   * @constructor\n   */\n  constructor(success, data) {\n    this._success = success;\n    this._data = data;\n  }\n\n  /**\n   * One of the chainable callbacks, success will either return a boolean\n   * describing the success state or itself if a callback is provided.\n   * The callback will be invoked if the success state is true.\n   * @param  {Function} callback A method to invoke if the success state is true,\n   *                             passing the _data value.\n   * @return {TileSelectorResult} Returns itself for chaining.\n   */\n  success(callback) {\n    if (!callback) {\n      return this._success;\n    }\n    if (this._success) {\n      callback(this._data);\n    }\n    return this;\n  }\n\n  /**\n   * The other chainable callback, failure will either return a boolean\n   * describing the success state or itself if a callback is provided.\n   * The callback will be invoked if the success state is false.\n   * @param  {Function} callback A method to invoke if the success state is false,\n   *                             passing the _data value.\n   * @return {TileSelectorResult} Returns itself for chaining.\n   */\n  failure(callback) {\n    if (!callback) {\n      return !this._success;\n    }\n    if (!this._success) {\n      callback(this._data);\n    }\n    return this;\n  }\n\n  /**\n   * The recommended method for creating a new successful TileSelectorResult.\n   * @param  {Object} data A map describing the success state.\n   * @return {TileSelectorResult} A new successful TileSelectorResult.\n   * @static\n   */\n  static success(data) {\n    return new TileSelectorResult(true, data);\n  }\n\n  /**\n   * The recommended method for creating a new failed TileSelectorResult.\n   * @param  {String} code The failure code.\n   * @return {TileSelectorResult} A new failed TileSelectorResult.\n   * @static\n   */\n  static failure(code) {\n    return new TileSelectorResult(false, code);\n  }\n\n}\n\n// Failure codes.\nTileSelectorResult.FAILURE_CLAIMED = 'claimed';\nTileSelectorResult.FAILURE_NOT_NEIGHBOR = 'notNeighbor';\nTileSelectorResult.FAILURE_CANNOT_ATTACK = 'cannotAttack';\n\nexport default TileSelectorResult;\n","import _ from 'lodash';\nimport {EventEmitter} from 'events';\n\n/**\n * A lightweight guided tutorial helper that is attached to a specific\n * event-emitting object, such as the cube. Displays helpful messages\n * to teach the player how to play.\n * @param {Object} target An event-emitting object to provide guidance for.\n * @class\n */\nfunction Tutorial() {}\n\nTutorial.prototype = {\n\n  /**\n   * Wraps an object's method with another method that invokes the\n   * tutorial's emission of a message event. This emission happens\n   * only once, and restores the previous method's state afterwards.\n   * @param  {Object} obj The host object.\n   * @param  {String} methodName The method name to wrap.\n   * @param  {String} key The lesson key.\n   * @return {Tutorial} This tutorial instance for chaining.\n   */\n  hook: function(obj, methodName, key) {\n    var oldMethod = obj[methodName];\n    obj[methodName] = _.bind(function() {\n      var result = oldMethod.apply(obj, arguments);\n      this.emit('message', Tutorial.lessons[key]);\n      obj[methodName] = oldMethod;\n      return result;\n    }, this);\n    return this;\n  }\n\n};\n\n// Mixin EventEmitter methods.\n_.assign(Tutorial.prototype, EventEmitter.prototype);\n\n// List of step messages.\nTutorial.stepMessages = [\n  'Let\\'s play! Click any tile to begin.',\n  'Rotate the cube using the arrow keys or WASD.',\n  'Great! Now, click a tile on an adjacent side.',\n  'Nice! A third tile was selected automatically for you.',\n  'Try to make a line on one side.'\n];\n\nTutorial.lessons = {\n  start: [\n    'Let\\'s play! Click any tile to begin.',\n    'Rotate the cube using the arrow keys or WASD.'\n  ],\n  click: 'Great! Now, click a tile on an adjacent side.',\n  turn: [\n    'Nice! A third tile was selected automatically for you.',\n    'Try to make a line on one side!'\n  ]\n};\n\nexport default Tutorial;\n","\n// The analytics script to load.\nvar SCRIPT_ENDPOINT = '//www.google-analytics.com/analytics.js',\n\n    // The analytics account id.\n    ACCOUNT = 'UA-2196067-3',\n\n    // The analytics global namespace.\n    TRACKER_NAMESPACE = 'ga';\n\n/**\n * A lightweight wrapper around whatever tracking interface is being used.\n * Currently, this interface is Google Analytics.\n */\nclass Tracker {\n\n  /**\n   * Creates a new Tracker instance and sets up the GA environment if it\n   * hasn't been initialized already.\n   * @constructor\n   */\n  constructor() {\n    if (!window.ga) {\n      this._initGateway();\n    }\n  }\n\n  /**\n   * Dispatches a game category event, such as 'start' or 'bot-win'.\n   * @param {String} action The action to track.\n   * @param {Number} [turns] How many turns have elapsed.\n   */\n  sendGameEvent(action, turns) {\n\n    var fields = {\n      hitType: 'event',\n      eventCategory: 'game',\n      eventAction: action\n    };\n\n    if (turns) {\n      fields.eventValue = turns;\n    }\n\n    ga('send', fields);\n  }\n\n  /**\n   * Creates a temporary global ga object, loads analytics.js, and fires off\n   * a pageview event.\n   */\n  _initGateway() {\n\n    var win = window,\n        doc = win.document,\n        script = doc.createElement('script'),\n        placeholder = doc.getElementsByTagName('script')[0];\n\n    // Acts as a pointer to support renaming.\n    win.GoogleAnalyticsObject = TRACKER_NAMESPACE;\n\n    // Creates an initial ga() function.  The queued commands will be executed once analytics.js loads.\n    win[TRACKER_NAMESPACE] = win[TRACKER_NAMESPACE] || function() {\n      (win[TRACKER_NAMESPACE].q = win[TRACKER_NAMESPACE].q || []).push(arguments);\n    };\n\n    // Sets the time (as an integer) this tag was executed.  Used for timing hits.\n    win[TRACKER_NAMESPACE].l = 1 * new Date();\n\n    // Insert the script tag asynchronously.\n    script.async = 1;\n    script.src = SCRIPT_ENDPOINT;\n    placeholder.parentNode.insertBefore(script, placeholder);\n\n    // Create the tracker and send a pageview hit.\n    ga('create', ACCOUNT, 'auto');\n    ga('send', 'pageview');\n  }\n\n}\n\nTracker.GAME_START = 'start';\nTracker.GAME_RESET = 'reset';\nTracker.GAME_BOT_WIN = 'bot-win';\nTracker.GAME_PLAYER_WIN = 'player-win';\nTracker.GAME_STALEMATE = 'stalemate'\n\nexport default Tracker;\n","export function listenOnce(target, type, callback) {\n  var handler = evt => {\n    target.removeEventListener(type, handler);\n    callback(evt);\n  };\n  target.addEventListener(type, handler);\n}\n","/**\n * This is a messy file containing vendor compatibility support logic.\n * Mostly, we're normalizing the a few CSS and JS methods and checking \n * whether or not the user's browser can handle the modern CSS we're throwing at it.\n * But yeah, not very pretty stuff below.\n */\n\nvar STYLE = document.body.style,\n\n    TRANSFORM = 'Transform',\n\n    // Prefixes used for things like Transform.\n    STYLE_PREFIXES = ['ms', 'O', 'Moz', 'Webkit'],\n\n    // Animation end events. Not quite perfect as IE10+ actually uses:\n    // 'animation' -> 'MSAnimationEnd'\n    // So ridiculous. Can't these be consistent?!\n    // Whatever. IE doesn't support preserve-3d anyways so no big deal.\n    // Map format:\n    // 'css-attribute':       [start, iteration, end]\n    ANIMATION_EVENT_MAP = {\n      'animation':            ['animationstart', 'animationiteration', 'animationend'],\n      '-o-animation':         ['oAnimationStart', 'oAnimationIteration', 'oAnimationEnd'],\n      '-moz-animation':       ['animationstart', 'animationiteration', 'animationend'],\n      '-webkit-animation':    ['webkitAnimationStart', 'webkitAnimationIteration', 'webkitAnimationEnd']\n    },\n    \n    len = STYLE_PREFIXES.length,\n\n    stylePrefix,\n\n    animationProperty,\n\n    eventTypes,\n\n    // Objects to hold browser-specific settings.\n    js = {},\n    css = {},\n    events = {};\n\n// First, let's determine the style prefix.\nwhile (len--) {\n  if ((STYLE_PREFIXES[len] + TRANSFORM) in STYLE) {\n    stylePrefix = STYLE_PREFIXES[len];\n    break;\n  }\n}\n\n// If there isn't a proper prefix, use the standard transform.\nif (!stylePrefix) {\n  stylePrefix = TRANSFORM.toLowerCase();\n}\n\n// Next, let's set some properties using the prefix.\njs.transform = stylePrefix + TRANSFORM;\ncss.transform = stylePrefix ? '-' + stylePrefix.toLowerCase() + '-transform' : 'transform';\n\n// Now, let's determine the event end name. So messed up.\nfor (animationProperty in ANIMATION_EVENT_MAP) {\n  if (typeof STYLE[animationProperty] !== 'undefined') {\n    eventTypes = ANIMATION_EVENT_MAP[animationProperty];\n    events.animationStart = eventTypes[0];\n    events.animationIteration = eventTypes[1];\n    events.animationEnd = eventTypes[2];\n    break;\n  }\n}\n\n// Normalize requestAnimationFrame for cross-browser compatibility.\nwindow.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\n// Check to see if the browser supports preserve-3d. If not, place a\n// special class on the body element.\n(function() {\n\n  var WEBKIT_TRANSFORM_STYLE = '-webkit-transform-style',\n      MOZ_TRANSFORM_STYLE = '-moz-transform-style',\n      MS_TRANSFORM_STYLE = '-ms-transform-style',\n      TRANSFORM_STYLE = 'transform-style',\n\n      element = document.createElement('p'),\n      body = document.body,\n      properties = {\n        webkitTransformStyle: WEBKIT_TRANSFORM_STYLE,\n        MozTransformStyle: MOZ_TRANSFORM_STYLE,\n        msTransformStyle: MS_TRANSFORM_STYLE,\n        transformStyle: TRANSFORM_STYLE\n      }\n\n  function has3D() {\n\n    var PRESERVE_3D = 'preserve-3d',\n        prop, computedStyle;\n\n    for (prop in properties) {\n      if (element.style[prop] !== undefined) {\n        element.style[prop] = PRESERVE_3D;\n      }\n    }\n\n    computedStyle = window.getComputedStyle(element);\n\n    return (computedStyle.getPropertyValue(WEBKIT_TRANSFORM_STYLE) ||\n      computedStyle.getPropertyValue(MOZ_TRANSFORM_STYLE) ||\n      computedStyle.getPropertyValue(MS_TRANSFORM_STYLE) ||\n      computedStyle.getPropertyValue(TRANSFORM_STYLE)) === PRESERVE_3D;\n  }\n\n  body.appendChild(element);\n\n  if (!has3D()) {\n    body.classList.add('no-3d');\n  }\n\n  body.removeChild(element);\n}());\n\nexport {js, css, events};\n"],"sourceRoot":"/source/"}