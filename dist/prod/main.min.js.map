{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","main.min.js","src/js/app.js","src/js/bot.js","src/js/cube/cube.js","src/js/cube/line.js","src/js/cube/side.js","src/js/cube/tile.js","src/js/game.js","src/js/messages.js","src/js/player.js","src/js/recorder.js","src/js/render/keyboard.js","src/js/render/renderer.js","src/js/render/touch.js","src/js/selection/CubeCache.js","src/js/selection/TileSelector.js","src/js/selection/TileSelectorResult.js","src/js/tutorial.js","src/js/util/util.js","src/js/util/vendor.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","_interopRequireWildcard","obj","__esModule","default","_Game","_Game2","./game","babel/polyfill",2,"Bot","name","tileClass","cube","opponent","_Player2","this","Object","defineProperty","value","_import","_import2","_Player","THINKING_SPEED","prototype","play","_logText","_log","_selectLines","_selectOpponentLines","_selectSingles","_selectOpponentSingles","selectRandom","_selector","getSelected","useOpponent","_this","lines","getLines","some","line","attack","initial","getInitialTile","tile","missingTiles","getAttackTile","selectTile","success","_this2","singles","shuffle","getSingles","single","isNeighboringSide","_selectByTileLine","revert","_this3","lineTiles","getAllLineTiles","find","lineTile","text","reduce","arguments","data","push","isEmpty","toString","join","./player","lodash",3,"Cube","el","size","style","_sides","_eventMap","_Side","_Side2","_import3","vendor","ROTATE_X_PREFIX","ROTATE_Y_PREFIX","ROTATE_UNIT_SUFFIX","REVOLUTION","ROTATION_UNIT","ORIGIN","build","_buildSides","x","y","Promise","resolve","addEventListener","events","animationIteration","classList","add","animationEnd","evt","target","remove","setRenderer","renderer","_renderer","rotate","_calculateCoordinate","js","transform","rotateToTiles","tiles","pairs","_getCommonVisibleCoordinates","coors","_getShortestRotationDistance","setMovement","then","listenTo","eventName","callback","context","handler","bind","stopListeningTo","forEach","removeEventListener","getSides","getVisibleSides","getAvailableTiles","except","tilesBySide","list","side","flatten","sortBy","updateCrosshairs","getNeighbors","neighbor","translate","tile1","tile2","neighbors","without","isVisible","intersection","current","difference","result","visibilityMap","map","_visibilityMap","xCoors","apply","keys","parseInt","yCoors","coor","pluck","zip","_getShortestCoordinateDiff","originCoor","targetCoor","revolution","diff","Math","abs","lowest","sides","children","id","TOP","top","BOTTOM","bottom","FRONT","front","BACK","back","LEFT","left","RIGHT","right","neighborMap","315","45","135","225","forIn","setNeighbors","setVisibilityMap","../util/vendor","./side",4,"Line","first","update","info","getTiles","all","every","includes","_tiles","pulsate","addClass","isHorizontal","xLine","indicies","matchedLine","yLine","xor","originIndex","index","flip","middle","floor","pow",5,"Side","_neighbors","_buildTiles","_Tile","_Tile2","_Line","_Line2","isNeighbor","contains","cubeX","cubeY","isUndefined","at","isArray","uniq","reject","times","slice","arr","mod","updateLines","./line","./tile",6,"Tile","claimedBy","appendChild","_events","_listenOnce","document","createElement","className","window","setTimeout","random","claim","player","removeClass","listenOnce","release","union","toSide","translation","translationMap","newLine","rest","transformedLine","method","X","Y","FLIP","ROTATE","../util/util",7,"Game","containerId","container","getElementById","isMobile","test","navigator","userAgent","_Cube2","querySelector","messages","_Messages2","_Renderer2","players","currentPlayer","_helperTile","recorder","_Recorder2","idle","_Cube","_Bot","_Bot2","_Renderer","_Recorder","_Messages","_Tutorial","_Tutorial2","hitbox","display","_initializeTutorial","initializeGame","human","bot","initialize","on","clearHelperTile","setCurrentPlayer","enableCubeInteraction","listenForInput","_handleClick","_handleMouseOver","_handleMouseOut","disableCubeInteraction","stopListeningForInput","botManual","hasValidMoves","isBot","_botTileSelection","_stalemate","getOpponent","indexOf","showCrosshairs","hideCrosshairs","tutorial","hook","_endTurn","getWinLines","record","_endGame","modifier","winBy","invoke","_waitAndListenForReset","_resetGameState","removeAll","setSyncMovement","releaseAll","_getTileFromElement","split","_this4","wait","claimAll","_this5","selected","deselect","failure","initialTile","./bot","./cube/cube","./messages","./recorder","./render/renderer","./tutorial","./util/util","./util/vendor",8,"Messages","delay","queue","_buildContainer","_remove","source","message","classes","_generateItem","LIST","item","DOMTokenList","createTextNode","_enqueue","last","removeChild","body","claimed","targetClaimed","cannotAttack","sameSide","notNeighbor","stalemate","newGame",9,"Player","_TileSelector2","_cubeCache","_CubeCache2","_TileSelector","_CubeCache","getAllTiles","_singles","getInitial","_cube","filter","canAttack","attackTile","validate","_selected","array","_createAttackData","reset","hasMove","attempt","selector","assign","./selection/CubeCache","./selection/TileSelector",10,"Recorder","app","_timeline","_cursor","_app","MESSAGES","NOT_FOUND","REWRITE","NO_LOG","behind","console","warn","dropRight","_package","forward","turnData","log","reverse","./cube/tile",11,"Keyboard","keyCodes","speed","collection","listen","undefined","generateHandler","partialRight","_boundHandleKeydown","_handleKeydown","_boundHandleKeyup","_handleKeyup","stopListening","getMovement","KB","UP","W","DOWN","S","A","D","keyCode","SPACE","ESCAPE",12,"Renderer","keyboard","touch","moveX","moveY","tickMax","tick","_EventEmitter","_Keyboard","_Keyboard2","_Touch","_Touch2","_input","_movementListener","draw","_setMovementFromInput","_loop","emit","move","coorProp","once","max","requestAnimationFrame","movement","EventEmitter","./keyboard","./touch",13,"Touch","iface","_Hammer2","get","set","direction","DIRECTION_ALL","threshold","velocity","_Hammer","_boundHandleSwipe","_handleSwipe","off","shift","offsetDirection","DIRECTION_UP","DIRECTION_DOWN","DIRECTION_LEFT","DIRECTION_RIGHT","hammerjs",14,"CubeCache","_lineMap","xPartial","_getPartialLineTiles","yPartial","xGrow","_growLine","yGrow","xShrink","yShrink","pull","_shrinkLine","_composesLines","_getLinesAsChain","concat","chain","values","compact","ln","../cube/line",15,"_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","_TileSelectorResult","_TileSelectorResult2","TileSelector","_player","resolveData","FAILURE_CLAIMED","_deselect","FAILURE_NOT_NEIGHBOR","merge","_select","FAILURE_CANNOT_ATTACK","toArray","Array","./TileSelectorResult",16,"TileSelectorResult","_success","_data",17,"Tutorial","methodName","oldMethod","lessons","stepMessages","start","click","turn",18,"type","_handler","_x",19,"stylePrefix","animationProperty","eventTypes","STYLE","TRANSFORM","STYLE_PREFIXES","ANIMATION_EVENT_MAP","animation","-o-animation","-moz-animation","-webkit-animation","len","css","toLowerCase","animationStart","mozRequestAnimationFrame","webkitRequestAnimationFrame","msRequestAnimationFrame"],"mappings":"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","file":"main.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",null,"import 'babel/polyfill';\nimport Game from './game';\n\n// Create a new game!\nvar game = new Game('container');","import _ from 'lodash';\nimport Player from './player';\n\nfunction Bot(name, tileClass, cube, opponent) {\n  Player.call(this, name, tileClass, cube);\n  this.opponent = opponent;\n}\n\nBot.THINKING_SPEED = 600;\n\nBot.prototype = {\n\n  /**\n   * Run through a list of tile selection commands in order of urgency.\n   * For instance, winning moves are more urgent than blocking single tiles.\n   * @return {Array} A collection of tiles selected.\n   */\n  play: function() {\n\n    // Init log.\n    this._logText = '';\n    this._log('================== BOT MOVE ==================');\n\n    // Is a bot win possible?\n    this._selectLines() ||\n\n    // Is a player (opponent) win possible?\n    this._selectOpponentLines() ||\n\n    // Are there available bot singles to extend into lines?\n    this._selectSingles() ||\n\n    // Are there available player (opponent) singles to block lines?\n    this._selectOpponentSingles() ||\n\n    // Is there any possible move at all?!\n    this.selectRandom();\n\n    // Return what we have, which is hopefully a trio of selected tiles.\n    return this._selector.getSelected();\n  },\n\n  /**\n   * Find lines to complete, either to win the game or to block\n   * the opponent.\n   * @param  {Boolean} useOpponent Should we use the opponent's lines?\n   * @return {Boolean} Was a match successful?\n   */\n  _selectLines: function(useOpponent) {\n\n    var lines = useOpponent ? this.opponent.getLines() : this.getLines();\n    this._log('++++++ LINES' + (useOpponent ? ' OPPONENT:' : ':'), lines);\n\n    return _.some(lines, line => {\n\n      var initial = this.getInitialTile(),\n          tile = line.missingTiles()[0],\n          attack;\n\n      this._log('+++ lines loop [initial, tile] :', initial, tile);\n\n      // If there's a tile selected already, try to seal the deal with two more.\n      if (initial && tile) {\n        attack = this.getAttackTile(initial, tile);\n        return attack && this.selectTile(tile, attack).success();\n      }\n      else {\n        this.selectTile(tile);\n      }\n    });\n  },\n\n  /**\n   * Block the opponent's lines to prevent a win.\n   * Relies on _selectLines.\n   * @return {Boolean} Was a match successful?\n   */\n  _selectOpponentLines: function() {\n    return this._selectLines(true);\n  },\n\n  /**\n   * Find singles to surround, either to build bot lines or to block the\n   * opponent from building lines.\n   * @param  {Boolean} useOpponent Should we use the opponent's singles?\n   * @return {Boolean} Was a match successful?\n   */\n  _selectSingles: function(useOpponent) {\n\n    var singles = _.shuffle(useOpponent ? this.opponent.getSingles() : this.getSingles());\n    this._log('------ SINGLES' + (useOpponent ? ' OPPONENT:' : ':'), singles);\n\n    return _.some(singles, single => {\n\n      var initial = this.getInitialTile(),\n          tile,\n          attack;\n\n      // If there is no initial tile or this singles selection is on a neighboring\n      // side, make a selection attempt.\n      if (!initial || single.isNeighboringSide(initial)) {\n        tile = this._selectByTileLine(single);\n      }\n\n      this._log('--- singles loop [initial, tile] :', initial, tile);\n\n      if (initial && tile) {\n        attack = this.getAttackTile(initial, tile);\n        this._selector.revert();\n        return attack && this.selectTile(tile, attack).success();\n      }\n    });\n  },\n\n  /**\n   * Surround opponent's singles to block further line creation.\n   * Relies on _selectSingles.\n   * @return {Boolean} Was a match successful?\n   */\n  _selectOpponentSingles: function() {\n    return this._selectSingles(true);\n  },\n\n  /**\n   * Attempts to select a tile on the same line as the given tile.\n   * Scans both x and y lines, shuffling the collection.\n   * @param  {Tile} tile The target tile.\n   * @return {Tile} The selected tile.\n   */\n  _selectByTileLine: function(tile) {\n\n    // Grab all the tiles on the same line as the passed tile.\n    var lineTiles = _.shuffle(tile.getAllLineTiles());\n\n    // Return the first tile that is a valid selection.\n    return _.find(lineTiles, lineTile => this.selectTile(lineTile).success());\n  },\n\n  /**\n   * A simple logging mechanism to record the bot's thoughts.\n   * Used in the Recorder object which looks for the _logText property.\n   */\n  _log: function() {\n\n    var text = _.reduce(arguments, function(lines, data) {\n      lines.push(!_.isEmpty(data) ? data.toString() : 'NONE');\n      return lines;\n    }, []).join(' ');\n\n    // Immediately output the message in the console.\n    //console.log(text);\n\n    // Append the text to the master log.\n    this._logText += text + '\\n';\n  }\n\n};\n\nexport default Bot;\n","import _ from 'lodash';\nimport Side from './side';\nimport * as vendor from '../util/vendor';\n\nfunction Cube(el, size) {\n\n  // The HTML element representing the cube.\n  this.el                     = el;\n\n  // The cube's size regarding tiles across a side. Default to 3.\n  this.size                   = size || 3;\n\n  // Cached reference to the style object.\n  this.style                  = this.el.style;\n\n  // This will be set in beginGame.\n  this._sides = null;\n\n  this._eventMap = {};\n}\n\nCube.ROTATE_X_PREFIX = 'rotateX(';\nCube.ROTATE_Y_PREFIX = 'rotateY(';\nCube.ROTATE_UNIT_SUFFIX = 'deg)';\nCube.REVOLUTION = 360;\nCube.ROTATION_UNIT = 90;\nCube.ORIGIN = 0;\n\nCube.prototype = {\n\n  /**\n   * Builds the game-mode version of the cube, slowing down the idle state\n   * to a stop and transitioning to the center of the screen. The initial\n   * rotation coordinate values are set and the sides are generated with their\n   * child tiles.\n   * @return {Promise} A promise that resolves when the transition ends.\n   */\n  build: function() {\n\n    // Create the game sides. The tiles will animate into existence from a\n    // trigger function during each side's creation.\n    this._sides = this._buildSides(this.size);\n\n    // Set the initial rotated state. Cut at 45 degrees to always display three sides.\n    this.x = this.y = Cube.REVOLUTION - (Cube.ROTATION_UNIT / 2);\n\n    return new Promise(resolve => {\n\n      // A reference to the cube's element.\n      var el = this.el;\n\n      // After the cube's rotation animation has made one loop, begin to slow it down.\n      el.addEventListener(vendor.events.animationIteration, function() {\n        el.classList.add('transition');\n        el.addEventListener(vendor.events.animationEnd, function animEnd(evt) {\n          if (evt.target === el) {\n\n            // Remove the transition class and append the init class. Done!\n            el.classList.remove('transition');\n            el.classList.add('init');\n\n            // Let's go!\n            resolve();\n          }\n        });\n      });\n    });\n  },\n\n  /**\n   * Sets a renderer so the cube can render itself. This is a bit hacky; please find\n   * another way to accomplish self-rendering.\n   * @param {Renderer} renderer The renderer to set on the cube.\n   */\n  setRenderer: function(renderer) {\n    this._renderer = renderer;\n  },\n\n  rotate: function(x, y) {\n    this.x = this._calculateCoordinate(this.x, x);\n    this.y = this._calculateCoordinate(this.y, y);\n\n    this.style[vendor.js.transform] =\n      Cube.ROTATE_X_PREFIX + this.x + Cube.ROTATE_UNIT_SUFFIX + ' ' + Cube.ROTATE_Y_PREFIX + this.y + Cube.ROTATE_UNIT_SUFFIX;\n  },\n\n  /**\n   * Calculate the rotation needed to display all the given tiles which\n   * must be neighbors to each other (for obvious reasons).\n   * @param  {Array} tiles A collection of tiles (three maximum).\n   * @return {Promise} A promise that resolves when the rotation is complete.\n   */\n  rotateToTiles: function(tiles) {\n\n    // First, collect all the common coordinates each tile shares when visible.\n    var pairs = this._getCommonVisibleCoordinates(tiles),\n\n        // Next, get calculate the shortest rotation distance from the pairs.\n        coors = this._getShortestRotationDistance(pairs);\n\n    // Return a promise that will resolve when the cube's rotation render completes.\n    return new Promise(resolve => {\n      this._renderer\n        .setMovement(coors[0], coors[1])\n        .then(resolve);\n    });\n  },\n\n  listenTo: function(eventName, callback, context) {\n\n    var events = this._eventMap,\n        handler = _.bind(callback, context || this);\n\n    if (!events[eventName]) {\n      events[eventName] = [];\n    }\n\n    this._eventMap[eventName].push(handler);\n    this.el.addEventListener(eventName, handler);\n\n    return this;\n  },\n\n  stopListeningTo: function(eventName) {\n\n    _.forEach(this._eventMap[eventName], function(handler) {\n      this.el.removeEventListener(eventName, handler);\n    }, this);\n\n    return this;\n  },\n\n  /**\n   * Fetches a cube side by name (e.g. 'top')\n   * @param  {String} name The name of the side you want.\n   * @return {Side}      The Side object by name.\n   */\n  getSides: function(name) {\n    return name ? this._sides[name] : this._sides;\n  },\n\n  /**\n   * @return {Array} The three visible sides.\n   */\n  getVisibleSides: function() {\n\n  },\n\n  /**\n   * Retrieves all the unclaimed tiles and sorts them by the amount per\n   * side in ascending order. If an exception tile is passed, do not include\n   * unclaimed tiles from that tile's side.\n   * @param  {Tile} except The tile whose side to exclude.\n   * @return {Array} A list of all the available tiles.\n   */\n  getAvailableTiles: function(except) {\n\n    // Get all the tiles by side and push each array to the main array list.\n    var tilesBySide = _.reduce(this.getSides(), function(list, side) {\n      if (!except || side !== except.side) {\n        list.push(_.shuffle(side.getAvailableTiles()));\n      }\n      return list;\n    }, []);\n\n    // Sort each side's array by length and then flatten the whole thing.\n    return _.flatten(_.sortBy(tilesBySide, 'length'));\n  },\n\n  /**\n   * Updates the passed tile and all related adjacent tiles with the\n   * passed callback. This method is mostly used for highlighting tiles\n   * to help the user make strategy decisions easier.\n   * @param  {DOMElement}   tile The selected tile as a raw DOM element.\n   * @param  {Function}     callback   The method to invoke passing each tile as an argument.\n   */\n  updateCrosshairs: function(tile, callback) {\n\n    // Run the callback on all tiles in the lines associated with the given tile.\n    _.forEach(tile.getAllLineTiles(), callback);\n\n    // For each neighbor, pass in the side and the orientation id (e.g. 'left').\n    _.forEach(tile.side.getNeighbors(), neighbor => {\n\n      // Find the translated tiles and run the callback on each.\n      _.forEach(tile.translate(neighbor), callback);\n    });\n  },\n\n  /**\n   * Gets the tile where the two passed tile's coordinates intersect.\n   * @param {Tile} [tile1] The first tile selected.\n   * @param {Tile} [tile2] The second tile selected.\n   * @return {Tile}       The tile being attacked.\n   */\n  getAttackTile: function(tile1, tile2) {\n\n    var neighbors, side;\n\n    if (tile1 && tile2 && tile1.isNeighboringSide(tile2)) {\n\n      // Get the neighbor sides and exclude the selected side.\n      neighbors = _.without(tile2.side.getNeighbors(), tile1.side),\n\n      // Get the neighbor that is visible.\n      side = _.find(neighbors, neighbor => neighbor.isVisible(this.x, this.y));\n\n      // Return the tile that intersects the two passed tiles.\n      return _.intersection(tile1.translate(side), tile2.translate(side))[0];\n    }\n\n    return null;\n  },\n\n  /**\n   * Given a current coordinate, update it with the difference.\n   * If the result is out of the revolution bounds (between 0 and 360),\n   * adjust it to a valid value.\n   * @param  {Number} current    The current coordinate value.\n   * @param  {Number} difference The value to update the current coordinate by.\n   * @return {Number}            The normalized result.\n   */\n  _calculateCoordinate: function(current, difference) {\n\n    var REVOLUTION = Cube.REVOLUTION,\n        result = current + difference;\n\n    if (result > REVOLUTION) {\n      result = result - REVOLUTION;\n    }\n    else if (result <= Cube.ORIGIN) {\n      result = REVOLUTION - result;\n    }\n\n    return result;\n  },\n\n  /**\n   * Calculates all the possible x/y coordinate combinations that exist\n   * where all the given tiles will be visible.\n   * @param  {Array} tiles The tiles to test.\n   * @return {Array}       A collection of valid coordinate collections.\n   *                       e.g. [[225, 225], [315, 45]]\n   */\n  _getCommonVisibleCoordinates: function(tiles) {\n\n    // Collect the visibility map of each passed tile into an array.\n    var visibilityMap = _.map(tiles, tile => tile.side._visibilityMap),\n\n        // Find all the x coordinates shared by all the tiles.\n        xCoors = _.intersection.apply(_, _.map(visibilityMap, function(map) {\n          return _.map(_.keys(map), _.parseInt);\n        })),\n\n        // Given the available x coordinates, find the shared y coordinates.\n        yCoors = _.flatten(_.map(xCoors, function(coor) {\n          return _.intersection.apply(_, _.pluck(visibilityMap, coor));\n        }));\n\n    // Return a collection of x/y collections shared among all the passed tiles.\n    return _.zip(xCoors, yCoors);\n  },\n\n  /**\n   * Calculates the shortest rotation distance between an origin coordinate\n   * and a target coordinate. Accounts for the circular continuation loop from 360\n   * to 0 and the reverse.\n   * @param  {Number} originCoor The coordinate you're currently at.\n   * @param  {Number} targetCoor The coordinate you wish to be at.\n   * @return {Number}            The shortest rotation movement to reach the target.\n   */\n  _getShortestCoordinateDiff: function(originCoor, targetCoor) {\n\n    var revolution = Cube.REVOLUTION,\n        diff = targetCoor - originCoor;\n\n    // If the absolute difference is more than half of a revolution, we need to\n    // take the circular continuation into account to get the shortest distance.\n    if (Math.abs(diff) > revolution / 2) {\n\n      // If the target is higher than the origin, we need to go into reverse.\n      if (targetCoor > originCoor) {\n        diff = targetCoor - revolution - originCoor;\n      }\n\n      // Otherwise, let's move ahead.\n      else {\n        diff = revolution - originCoor + targetCoor;\n      }\n    }\n\n    return diff;\n  },\n\n  /**\n   * Calculates the shortest rotation distance given a collection of\n   * coordinate pairs. This method is meant to be used with data provided\n   * by _getCommonVisibleCoordinates.\n   * @param  {Array} pairs A collection of coordinate pairs.\n   * @return {Array}       A single coordinate pair. e.g. [45, 135]\n   */\n  _getShortestRotationDistance: function(pairs) {\n\n    return _.reduce(pairs, function(lowest, current) {\n\n      // First, determine shortest differences for each coordinate so we can\n      // compare them to a previous lowest pair.\n      var diff = [\n        this._getShortestCoordinateDiff(this.x, current[0]),\n        this._getShortestCoordinateDiff(this.y, current[1])\n      ];\n\n      // If a lowest pair hasn't been set yet or the sum of the current coor\n      // differences is less than the previously set lowest pair's, then return\n      // the current pair as the lowest.\n      if (!lowest || Math.abs(diff[0]) + Math.abs(diff[1]) < Math.abs(lowest[0]) + Math.abs(lowest[1])) {\n        return diff;\n      }\n\n      // Otherwise, return the lowest.\n      return lowest;\n    }, null, this);\n  },\n\n  _buildSides: function(size) {\n\n    // Create sides.\n    var sides = _.reduce(this.el.children, function(list, el) {\n      list[el.id] = new Side(el, size);\n      return list;\n    }, {});\n\n    var TOP = sides.top,\n        BOTTOM = sides.bottom,\n        FRONT = sides.front,\n        BACK = sides.back,\n        LEFT = sides.left,\n        RIGHT = sides.right;\n\n    // Pretty crappy ... FOR TESTING ONLY!\n    var neighborMap = {\n      top: [BACK, FRONT, LEFT, RIGHT],\n      bottom: [FRONT, BACK, LEFT, RIGHT],\n      front: [TOP, BOTTOM, LEFT, RIGHT],\n      back: [BOTTOM, TOP, LEFT, RIGHT],\n      left: [TOP, BOTTOM, BACK, FRONT],\n      right: [TOP, BOTTOM, FRONT, BACK]\n    };\n\n    var visibilityMap = {\n      // x: [y]\n      front: {\n        '315':    [45, 315],\n        '45':     [45, 315],\n        '135':    [135, 225],\n        '225':    [135, 225]\n      },\n\n      back: {\n        '315':    [135, 225],\n        '45':     [135, 225],\n        '135':    [45, 315],\n        '225':    [45, 315]\n      },\n\n      top: {\n        '315':    [45, 135, 225, 315],\n        '225':    [45, 135, 225, 315]\n      },\n\n      bottom: {\n        '135':    [45, 135, 225, 315],\n        '45':     [45, 135, 225, 315]\n      },\n\n      left: {\n        '315':    [45, 135],\n        '45':     [45, 135],\n        '135':    [225, 315],\n        '225':    [225, 315]\n      },\n\n      right: {\n        '315':    [225, 315],\n        '45':     [225, 315],\n        '135':    [45, 135],\n        '225':    [45, 135]\n      }\n    };\n\n    // Now set the neighbors for each side.\n    return _.forIn(sides, function(side) {\n      side.setNeighbors(neighborMap[side.id]);\n      side.setVisibilityMap(visibilityMap[side.id]);\n    });\n  }\n\n};\n\nexport default Cube;\n","import _ from 'lodash';\n\n/**\n * Lines represent tiles in either a horizontal or vertical row\n * which serve as points or win states.\n * @param {Array} tiles  A collection of tiles that compose the line.\n */\nfunction Line(tiles) {\n  this.side = _.first(tiles).side;\n  this.update(tiles);\n}\n\nLine.prototype = {\n\n  /**\n   * Outputs useful identifying information for troubleshooting.\n   * @return {String} String information.\n   */\n  toString: function() {\n    var info = _.reduce(this.getTiles(), function(tiles, tile) {\n      tiles.push(tile.toString());\n      return tiles;\n    }, []);\n    return '(' + info.join(' ') + ')';\n  },\n\n  /**\n   * Checks to see if the line contains all of the passed tiles.\n   * @param  {Array} tiles The tiles to check.\n   * @return {Boolean} Does the line contain the passed tiles?\n   */\n  all: function(tiles) {\n    var lineTiles = this.getTiles();\n    return _.every(tiles, tile => {\n      return _.includes(lineTiles, tile);\n    });\n  },\n\n  /**\n   * Checks to see if all the tiles in the line are included in\n   * the passed tiles array.\n   * @param  {[type]} tiles [description]\n   * @return {[type]}       [description]\n   */\n  some: function(tiles) {\n    return _.every(this.getTiles(), tile => {\n      return _.includes(tiles, tile);\n    });\n  },\n\n  update: function(tiles) {\n    this._tiles = tiles;\n  },\n\n  /**\n   * Updates the UI to display a winning state involving the line.\n   */\n  pulsate: function() {\n    _.forEach(this.getTiles(), tile => tile.addClass('win'));\n  },\n\n  /**\n   * Reports whether or not the line is horizontal by checking the\n   * index difference between two adjacent tiles.\n   * @return {Boolean} Is this line horizontal?\n   */\n  isHorizontal: function() {\n    var tiles = this.getTiles();\n    return _.includes(tiles[0].xLine.getTiles(), tiles[1]);\n  },\n\n  /**\n   * @return {Array} A collection of tiles that compose the line.\n   */\n  getTiles: function() {\n    return this._tiles;\n  },\n\n  /**\n   * @return {Number} The number of tiles in the line.\n   */\n  length: function() {\n    return this._tiles.length;\n  },\n\n  /**\n   * @return {Array} The indicies of all the tiles.\n   */\n  indicies: function() {\n    return _.map(this.getTiles(), 'index');\n  },\n\n  /**\n   * @return {Array} A collection of the missing tiles.\n   */\n  missingTiles: function() {\n\n    var tiles = this.getTiles(),\n\n        // Are we matching against a horizontal or vertical line?\n        matchedLine = this.isHorizontal() ? _.first(tiles).xLine : _.first(tiles).yLine;\n\n    // Now we can figure out which tiles are missing by diffing the two lines.\n    return _.xor(tiles, matchedLine.getTiles());\n  },\n\n  // Rotate in place, like a Tetrad. For instance:\n  // xoo      xxx\n  // xoo  ->  ooo\n  // xoo      ooo\n  rotate: function() {\n\n    // Where the line begins, starting from top-left.\n    var originIndex = _.first(this.getTiles()).index;\n\n    if (this.isHorizontal()) {\n      return this.side.getTiles(originIndex + (originIndex / this.length()))[0].yLine;\n    }\n\n    return this.side.getTiles(originIndex * this.length())[0].xLine;\n  },\n\n  // Flip across a median. For instance:\n  //    xoo      oox\n  //    xoo  ->  oox\n  //    xoo      oox\n  flip: function() {\n\n    // Where the line begins, starting from top-left.\n    var originIndex = _.first(this.getTiles()).index,\n\n        // The middle line.\n        middle;\n\n    if (this.isHorizontal()) {\n\n      // The middle row, which is the size squared cut in half and floored.\n      // NOTE: This could be buggy with other sizes!\n      middle = Math.floor((Math.pow(this.length(), 2) / 2) - 1);\n\n      // Determine the difference and get the calculated x line.\n      return this.side.getTiles(middle * 2 - originIndex)[0].xLine;\n    }\n\n    // The middle column.\n    middle = (this.length() - 1) / 2;\n\n    // Determine the difference and get the calculated y line.\n    return this.side.getTiles(middle * 2 - originIndex)[0].yLine;\n  }\n\n};\n\nexport default Line;","import _ from 'lodash';\nimport Tile from './tile';\nimport Line from './line';\n\nfunction Side(el, size) {\n\n  // HTML element representing the side.\n  this.el = el;\n\n  // The face id (top, bottom, front, back, left, right).\n  this.id = el.id;\n\n  // This will be set using setNeighbors().\n  this._neighbors = {};\n\n  // An array of all the tiles by index.\n  this._tiles = this._buildTiles(size);\n}\n\nSide.prototype = {\n\n  getNeighbors: function() {\n    return this._neighbors;\n  },\n\n  setNeighbors: function(sides) {\n    this._neighbors = sides;\n  },\n\n  /**\n   * A check to determine if the passed side is one of this side's neighbors.\n   * @param  {Side}  side The side object to check.\n   * @return {Boolean}      Is the passed side a neighbor?\n   */\n  isNeighbor: function(side) {\n    return _.contains(this._neighbors, side);\n  },\n\n  setVisibilityMap: function(map) {\n    this._visibilityMap = map;\n  },\n\n  isVisible: function(cubeX, cubeY) {\n    return _.contains(this._visibilityMap[cubeX], cubeY);\n  },\n\n  /**\n   * Fetches specific tiles referenced by the passed indicies,\n   * or all tiles if indicies are not passed.\n   * @param  {[String|Number|Number[]]} indicies An array of indicies.\n   * @return {Tile[]}          An array of selected tiles.\n   */\n  getTiles: function(indicies) {\n    if (_.isUndefined(indicies)) {\n      return this._tiles;\n    }\n    return _.at(this._tiles, _.isArray(indicies) ? _.uniq(_.flatten(indicies)) : +indicies);\n  },\n\n  /**\n   * Returns all the tiles that are still unclaimed.\n   * @return {Array} A collection of unclaimed tiles.\n   */\n  getAvailableTiles: function() {\n    return _.reject(this._tiles, 'claimedBy');\n  },\n\n  _buildTiles: function(size) {\n\n    // First let's create an array of tiles based on the cube size.\n    var tiles = _.times(Math.pow(size, 2), index => new Tile(this, index)),\n\n    // Now we'll create lines from the tiles.\n    lines = {\n\n      // Creating x coordinate lines.\n      x: _.times(size, function(n) {\n          return new Line(tiles.slice(n * size, (n + 1) * size));\n        }),\n\n      // Creating y coordinate lines.\n      y: _.times(size, function(n) {\n          var arr = _.times(size, function(i) {\n            return n + i * size;\n          });\n          return new Line(_.at(tiles, arr));\n        })\n    };\n\n    // For each tile, assign the correct lines.\n    _.forEach(tiles, function(tile, index) {\n\n      var mod = index % size,\n          xLine = lines.x[(index - mod) / size],\n          yLine = lines.y[mod];\n\n      tile.updateLines(xLine, yLine);\n    });\n\n    // Return the tiles.\n    return tiles;\n  }\n\n};\n\nexport default Side;\n","import _ from 'lodash';\nimport {events} from '../util/vendor';\nimport {listenOnce} from '../util/util';\n\nfunction Tile(side, index) {\n\n  // Set properties.\n  this.el = this.build(side.id + '-' + index);\n  this.side = side;\n  this.index = index;\n\n  this.claimedBy = null;\n  this.xLine = null;\n  this.yLine = null;\n\n  // Append the tile's element to the side.\n  side.el.appendChild(this.el);\n}\n\nTile.prototype = {\n\n  /**\n   * Outputs useful identifying information for troubleshooting.\n   * @return {String} Tile information.\n   */\n  toString: function() {\n    return this.el.id;\n  },\n\n  build: function(id) {\n\n    // Create the tile element.\n    var el = document.createElement('div');\n    el.id = id;\n    el.className = 'tile';\n\n    // Initialize after a random time. This begins the tile drop animation.\n    window.setTimeout(() => this.addClass('init'), Math.random() * 2000);\n\n    // debug\n    //var idData = id.split('-');\n    //el.appendChild(document.createTextNode(idData[0].slice(0, 2) + idData[1]));\n\n    return el;\n  },\n\n  claim: function(player) {\n    this.claimedBy = player;\n    this\n      .removeClass('unclaimed')\n      .addClass('preclaimed')\n      .addClass(player.tileClass);\n\n    listenOnce(this.el, events.animationEnd, () => {\n      this.removeClass('preclaimed').addClass('claimed');\n    });\n  },\n\n  release: function() {\n    if (this.claimedBy) {\n      this\n        .addClass('unclaimed')\n        .removeClass('claimed')\n        .removeClass(this.claimedBy.tileClass)\n        .removeClass('win');\n      this.claimedBy = null;\n    }\n  },\n\n  isNeighboringSide: function(tile) {\n    return this.side.isNeighbor(tile.side);\n  },\n\n  addClass: function(name) {\n    this.el.classList.add(name);\n    return this;\n  },\n\n  removeClass: function(name) {\n    this.el.classList.remove(name);\n    return this;\n  },\n\n  updateLines: function(x, y) {\n    this.xLine = x;\n    this.yLine = y;\n  },\n\n  /**\n   * @return {Array} All the tiles composing both lines.\n   */\n  getAllLineTiles: function() {\n    return _.union(this.xLine.getTiles(), this.yLine.getTiles());\n  },\n\n  translate: function(toSide) {\n\n    // A translation is a recipe for morphing one line into another.\n    // It looks like this: [1, flip]\n    // Where: The first index is the coordinate to use in a line pair\n    //        The remaining indicies are methods to invoke on the line\n    var translation = Tile.translationMap[this.side.id][toSide ? toSide.id : null],\n\n        // The line from the line pair to use.\n        line = _.first(translation) === 'x' ? this.xLine : this.yLine;\n\n    if (translation) {\n\n      // Run through each translation method (flip, rotate) and return the result.\n      var newLine = _.reduce(_.rest(translation), function(transformedLine, method) {\n        return transformedLine[method]();\n      }, line);\n\n      return toSide.getTiles(newLine.indicies());\n    }\n\n    return null;\n  }\n\n};\n\nTile.translationMap = (function() {\n\n  var X = 'x',\n      Y = 'y',\n      FLIP = 'flip',\n      ROTATE = 'rotate';\n\n  // Line coordinate mapping to side id.\n  // [coordinate, methods...]\n  return {\n\n    front: {\n      top:      [Y],                // top\n      bottom:   [Y],                // bottom\n      left:     [X],                // left\n      right:    [X]                 // right\n    },\n\n    back: {\n      bottom:   [Y, FLIP],          // top\n      top:      [Y, FLIP],          // bottom\n      left:     [X],                // left\n      right:    [X]                 // right\n    },\n\n    top: {\n      back:     [Y, FLIP],          // top\n      front:    [Y],                // bottom\n      left:     [X, ROTATE],        // left\n      right:    [X, FLIP, ROTATE],  // right\n    },\n\n    bottom: {\n      front:    [Y],                // top\n      back:     [Y, FLIP],          // bottom\n      left:     [X, FLIP, ROTATE],  // left\n      right:    [X, ROTATE]         // right\n    },\n\n    left: {\n      top:      [Y, ROTATE],        // top\n      bottom:   [Y, FLIP, ROTATE],  // bottom\n      back:     [X],                // left\n      front:    [X]                 // right\n    },\n\n    right: {\n      top:      [Y, FLIP, ROTATE],  // top\n      bottom:   [Y, ROTATE],        // bottom\n      front:    [X],                // left\n      back:     [X]                 // right\n    }\n  };\n\n}());\n\nexport default Tile;","import _ from 'lodash';\nimport Cube from './cube/cube';\nimport Player from './player';\nimport Bot from './bot';\nimport Renderer from './render/renderer';\nimport Recorder from './recorder';\nimport Messages from './messages';\nimport Tutorial from './tutorial';\nimport {listenOnce} from './util/util';\nimport {events} from './util/vendor';\n\nfunction Game(containerId) {\n\n  // The site container which houses the cube and intro text.\n  this.container = document.getElementById(containerId);\n\n  // Check if the client is on a mobile device.\n  this.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent);\n\n  // The fun part!\n  this.cube = new Cube(this.container.querySelector('.cube'));\n\n  // UI for displaying various messages.\n  this.messages = new Messages();\n\n  // An object that detects user interaction to manipulate the cube.\n  this.renderer = new Renderer(this.cube, this.isMobile);\n\n  // In-game players.\n  this.players = null;\n  this.currentPlayer = null;\n\n  // Cross-selected tile for helping attacks.\n  this._helperTile = null;\n\n  // Records moves as they're made. Can be used to step through time.\n  this.recorder = new Recorder(this);\n\n  // Listen for user interactions.\n  this.idle();\n}\n\nGame.prototype = {\n\n  /**\n   * Configures the cube object's default pre-game state.\n   */\n  idle: function() {\n\n    var container = this.container,\n        hitbox = container.querySelector('#hit');\n\n    // Click the cube to begin the game.\n    listenOnce(hitbox, 'click', () => {\n\n      hitbox.style.display = 'none';\n      container.classList.add('game');\n      this._initializeTutorial();\n\n      listenOnce(container, events.animationEnd, () => {\n        this.cube\n          .build()\n          .then(_.bind(this.initializeGame, this));\n      });\n    });\n  },\n\n  /**\n   * Configures the cube for game mode by creating players, setting listeners,\n   * and initializing the renderer.\n   */\n  initializeGame: function() {\n\n    // Create the players: A human and a bot.\n    var human = new Player('Player', 'player1', this.cube),\n        bot = new Bot('CPU', 'player2', this.cube, human);\n\n    this.players = [human, bot];\n\n    // Begin the rendering.\n    this.renderer.initialize();\n\n    // Let's clear the helper tile when the cube is rotating.\n    this.renderer.on('start', _.bind(this.clearHelperTile, this));\n\n    // Set the current player as the first player. This \"officially\" begins the game.\n    this.setCurrentPlayer(_.first(this.players));\n  },\n\n  enableCubeInteraction: function() {\n    this.renderer.listenForInput();\n    this.cube\n      .listenTo('click', this._handleClick, this)\n      .listenTo('mouseover', this._handleMouseOver, this)\n      .listenTo('mouseout', this._handleMouseOut, this);\n  },\n\n  disableCubeInteraction: function() {\n    this.renderer.stopListeningForInput();\n    this.cube\n      .stopListeningTo('click')\n      .stopListeningTo('mouseover')\n      .stopListeningTo('mouseout');\n  },\n\n  /**\n   * Sets the current player to the passed player, displaying the correct\n   * messaging and updating the UI state.\n   * @param {Player} player    The player to set as the current player.\n   * @param {Boolean} botManual Should the bot play it's turn automatically?\n   *                            Used in recorder mode to pause auto playback.\n   */\n  setCurrentPlayer: function(player, botManual) {\n\n    // Broadcast that it's the passed player's turn.\n    this.messages.add(player.name + '\\'s turn!', 'alert');\n\n    // Don't set the same player twice.\n    if (this.currentPlayer !== player) {\n\n      this.cube.el.classList.add(player.tileClass + '-turn');\n      if (this.currentPlayer) {\n        this.cube.el.classList.remove(this.currentPlayer.tileClass + '-turn');\n      }\n\n      this.currentPlayer = player;\n\n      // If the player has valid moves, start the turn as usual.\n      if (player.hasValidMoves()) {\n        if (player.isBot()) {\n          this.disableCubeInteraction();\n          if (!botManual) {\n            this._botTileSelection(player.play());\n          }\n        }\n        else {\n          this.enableCubeInteraction();\n        }\n      }\n\n      // Otherwise, declare a stalemate. Nobody wins.\n      else {\n        this._stalemate()\n      }\n    }\n  },\n\n  getOpponent: function(player) {\n    return this.players[this.players.indexOf(player) === 1 ? 0 : 1];\n  },\n\n  showCrosshairs: function(tile) {\n    tile.addClass('selected');\n    this.cube.updateCrosshairs(tile, tile => tile.addClass('highlighted'));\n  },\n\n  hideCrosshairs: function(tile) {\n    tile.removeClass('selected');\n    this.cube.updateCrosshairs(tile, tile => tile.removeClass('highlighted'));\n  },\n\n  clearHelperTile: function() {\n    if (this._helperTile) {\n      this._helperTile.removeClass('helper');\n    }\n    this._helperTile = null;\n  },\n\n  /**\n   * Instantiates a tutorial instance and hooks into methods that should\n   * emit lesson messages.\n   */\n  _initializeTutorial: function() {\n    this.tutorial = new Tutorial();\n    this.tutorial\n      .hook(this, 'initializeGame', 'start')\n      .hook(this, 'showCrosshairs', 'click')\n      .hook(this, '_endTurn', 'turn');\n    this.messages.listenTo(this.tutorial);\n  },\n\n  /**\n   * Ends the current player's turn and determines if the game is\n   * in a win state.\n   * @param  {Array} tiles The tiles selected to end the turn.\n   */\n  _endTurn: function(tiles) {\n\n    var player = this.currentPlayer,\n        lines = player.getWinLines();\n\n    this.recorder.record(player, tiles);\n    this.clearHelperTile();\n    this.hideCrosshairs(_.first(tiles));\n\n    // If the player has made at least one line, end the game.\n    if (!this._endGame(lines)) {\n      this.setCurrentPlayer(this.getOpponent(player));\n    }\n  },\n\n  /**\n   * Attempts to end the game.\n   * @param  {Array} lines The lines used to win.\n   * @return {Boolean} Is the game in a win state?\n   */\n  _endGame: function(lines) {\n\n    var winBy = lines.length,\n        modifier;\n\n    if (winBy) {\n\n      // Display message with modifier.\n      modifier = winBy > 1 ? ' x' + winBy + '!' : '!';\n      this.messages.add(`${this.currentPlayer.name} wins${modifier}`, 'alert persist');\n\n      // Show the winning lines.\n      _.invoke(lines, 'pulsate');\n\n      // Alert the user on how to start a new game.\n      this._waitAndListenForReset();\n\n      // Yes, the game has ended.\n      return true;\n    }\n\n    // Nobody has won yet. Continue!\n    return false;\n  },\n\n  /**\n   * Reveal messages regarding the stalemate and begin listening to\n   * start a new game.\n   */\n  _stalemate: function() {\n    this.messages\n      .add('stalemate', 'alert persist')\n      .add(`${this.currentPlayer.name} has no valid moves.`, 'persist');\n    this._waitAndListenForReset();\n  },\n\n  /**\n   * After a brief pause, alerts the user about how to start a new game\n   * and sets a listener.\n   */\n  _waitAndListenForReset: function() {\n\n    // Remove the current player and disable cube interactions.\n    this.currentPlayer = null;\n    this.disableCubeInteraction();\n\n    // After two seconds, display a message to begin a new game and\n    // listen for document clicks to reset.\n    setTimeout(() => {\n      this.messages.add('newGame', 'persist');\n      listenOnce(document, 'click', _.bind(this._resetGameState, this));\n    }, 2000);\n  },\n\n  /**\n   * Removes all claimed tiles from each player and destroys all messages.\n   * Sets the current player to the first player in the array.\n   */\n  _resetGameState: function() {\n\n    this.messages.removeAll();\n    this.cube.el.classList.add('reset');\n\n    this.renderer.setSyncMovement(450, 450).then(() => {\n      _.forEach(this.players, player => player.releaseAll());\n      this.cube.el.classList.remove('reset');\n      this.setCurrentPlayer(_.first(this.players));\n    });\n  },\n\n  // Potentially dangerous as this is hackable...\n  // Perhaps do a straigh-up element match too?\n  _getTileFromElement: function(el) {\n    var data;\n    if (el.classList.contains('tile')) {\n      data = el.id.split('-');\n      return this.cube.getSides(data[0]).getTiles(data[1])[0];\n    }\n    return null;\n  },\n\n  /**\n   * Claimes all the tiles the bot has selected and updates the UI using a\n   * flow the user is familiar with.\n   * @param  {Array} tiles The tiles the bot has selected.\n   */\n  _botTileSelection: function(tiles) {\n\n    /**\n     * A simple function that returns a promise after after the bot is\n     * finished 'thinking'.\n     * @return {Promise} A promise resolved after a set period of time.\n     */\n    var wait = () => {\n      return new Promise(resolve => {\n        setTimeout(resolve, Bot.THINKING_SPEED);\n      });\n    };\n\n    // Wait a moment before running through the selection UI updates, which\n    // include rotating the cube to display all the tiles, showing crosshairs\n    // for the first tile, and then claiming all before ending the turn.\n    wait()\n      .then(() => this.cube.rotateToTiles(tiles))\n      .then(wait)\n      .then(() => this.showCrosshairs(tiles[0]))\n      .then(wait)\n      .then(() => {\n        this.currentPlayer.claimAll();\n        this._endTurn(tiles);\n      });\n  },\n\n  _handleClick: function(evt) {\n\n    // Get the target element from the event.\n    var tile = this._getTileFromElement(evt.target);\n\n    // If the tile exists, try to select it.\n    if (tile) {\n      this.currentPlayer\n        .selectTile(tile, this._helperTile)\n\n        // On success, react based on the number of tiles currently selected.\n        .success(data => {\n\n          // Cache the selected tiles.\n          var selected = data.selected,\n              length = selected && selected.length;\n\n          if (data.deselect) {\n            this.hideCrosshairs(data.deselect[0]);\n          }\n\n          if (length === 1) {\n            this.showCrosshairs(selected[0]);\n          }\n          else if (length === 3) {\n            this.currentPlayer.claimAll();\n            this._endTurn(selected);\n          }\n        })\n\n        // On failure, display a message based on the failure code.\n        .failure(code => this.messages.add(code, 'error'));\n    }\n  },\n\n  _handleMouseOver: function(evt) {\n\n    // The tile the user is interacting with.\n    var tile = this._getTileFromElement(evt.target),\n\n        // The first tile that has been selected.\n        initialTile = this.currentPlayer.getInitialTile();\n\n    // If the user is hovering on a neighboring side of the initial tile,\n    // highlight some targeting help on a visible side.\n    this._helperTile = this.cube.getAttackTile(tile, initialTile);\n\n    if (this._helperTile) {\n      this._helperTile.addClass('helper');\n    }\n  },\n\n  _handleMouseOut: function(evt) {\n    this.clearHelperTile();\n  }\n\n};\n\nexport default Game;\n","import _ from 'lodash';\nimport {events} from './util/vendor';\n\nfunction Messages() {\n  this.delay = 100;\n  this.queue = [];\n  this.container = this._buildContainer();\n  this.container.addEventListener(events.animationEnd, _.bind(this._remove, this));\n}\n\nMessages.prototype = {\n\n  listenTo: function(source) {\n    source.on('message', _.bind(this.add, this));\n  },\n\n  /**\n   * Creates a new message to add to the queue.\n   * @param {String|Array[String]} message The message text or an array of messages.\n   * @param {[String]} classes A space-separated list of classes to append to the message.\n   * @return {Messages} Returns itself for chaining.\n   */\n  add: function(message, classes) {\n\n    // Format the message as an array if not already.\n    message = _.isArray(message) ? message : [message];\n\n    // Generate a message item for each message.\n    // If the text matches a LIST key, use the key's value.\n    _.forEach(message, text => {\n      this._generateItem(Messages.LIST[text] || text, classes);\n    });\n\n    return this;\n  },\n\n  /**\n   * Removes all persisted messages from the queue by adding the 'hide'\n   * class to each one.\n   */\n  removeAll: function() {\n    _.forEach(this.container.children, item => item.classList.add('hide'));\n  },\n\n  /**\n   * Generates a message element and queues it up for display.\n   * @param  {String} message The message to display.\n   * @param  {[String]} classes A space-separated list of classes to append to the message.\n   */\n  _generateItem: function(message, classes) {\n\n    // Generate a new element to contain the message.\n    var item = document.createElement('li');\n\n    // Add special classes to decorate the message if passed. We want to use apply here \n    // because add takes multiple arguments, not an array of names.\n    if (classes) {\n      DOMTokenList.prototype.add.apply(item.classList, classes.split(' '));\n    }\n\n    // Append the message to the new element and queue it up.\n    item.appendChild(document.createTextNode(message));\n    this._enqueue(item);\n  },\n\n  _enqueue: function(item) {\n\n    var container = this.container,\n        queue = this.queue,\n        delay = queue.length * this.delay;\n\n    queue.push(item);\n\n    _.delay(function(i) {\n      container.appendChild(item);\n      if (_.last(queue) === i) {\n        queue.length = 0;\n      }\n    }, delay, item);\n  },\n\n  /**\n   * Removes a message item referenced by the passed animationend event.\n   * The message will be removed if it's not persistent or it contains\n   * the 'hide' class.\n   * @param  {animationend} evt An animationend event.\n   */\n  _remove: function(evt) {\n    var classList = evt.target.classList;\n    if (!classList.contains('persist') || classList.contains('hide')) {\n      this.container.removeChild(evt.target);\n    }\n  },\n\n  _buildContainer: function() {\n    var container = document.createElement('ul');\n    container.id = 'messages';\n    document.body.appendChild(container);\n    return container;\n  }\n\n};\n\nMessages.LIST = {\n  claimed: 'This tile is already claimed!',\n  targetClaimed: 'The attack target is already claimed by you!',\n  cannotAttack: 'You cannot attack your own tile!',\n  sameSide: 'Same side! Choose a tile on a different side.',\n  notNeighbor: 'Not a neighboring side! Choose a tile different side.',\n  stalemate: 'Stalemate!',\n  newGame: 'Click anywhere to begin a new game.'\n};\n\nexport default Messages;\n","import _ from 'lodash';\nimport Bot from './bot';\nimport TileSelector from './selection/TileSelector';\nimport CubeCache from './selection/CubeCache';\n\nfunction Player(name, tileClass, cube) {\n  this.name = name;\n  this.tileClass = tileClass;\n  this._selector = new TileSelector(this);\n  this._cubeCache = new CubeCache(cube);\n}\n\nPlayer.prototype = {\n\n  isBot: function() {\n    return this instanceof Bot;\n  },\n\n  claim: function(tile) {\n    tile.claim(this);\n    this._cubeCache.add(tile);\n  },\n\n  release: function(tile) {\n    this._cubeCache.remove(tile);\n    tile.release();\n  },\n\n  releaseAll: function() {\n    _.forEach(this._cubeCache.getAllTiles(), tile => tile.release());\n    this._cubeCache.initialize();\n  },\n\n  getLines: function() {\n    return this._cubeCache.getLines();\n  },\n\n  /**\n   * @return {Array[Tile]} All the tiles claimed that do not compose lines.\n   */\n  getSingles: function() {\n    return this._cubeCache._singles;\n  },\n\n  /**\n   * @return {Tile} The first tile selected to be claimed.\n   */\n  getInitialTile: function() {\n    return this._selector.getInitial();\n  },\n\n  getAttackTile: function(tile1, tile2) {\n    return this._cubeCache._cube.getAttackTile(tile1, tile2);\n  },\n\n  /**\n   * Win lines are completed lines. This method returns all the win\n   * lines claimed by the player.\n   * @return {Array} A collection of this player's win lines.\n   */\n  getWinLines: function() {\n    var size = this._cubeCache._cube.size;\n    return _.filter(this.getLines(), function(line) {\n      return line.length() === size;\n    });\n  },\n\n  /**\n   * Dictates whether or not the player can attack the given tile.\n   * Basically, as long as the tile is not claimed by the player and\n   * is not some barrier, the tile can be attacked.\n   * @param  {Tile} tile The tile to check.\n   * @return {Boolean} Can the given tile be attacked by this player?\n   */\n  canAttack: function(tile) {\n    return tile.claimedBy !== this;\n  },\n\n  selectTile: function(tile, attackTile) {\n    return this._selector.validate(tile, attackTile);\n  },\n\n  claimAll: function() {\n\n    _.forEach(this._selector._selected, function(tile, index, array) {\n\n      // If the tile is already claimed, this is an attack! Release it.\n      // Also, replace it with attack data so the recorder will work.\n      if (tile.claimedBy) {\n        array[index] = this._createAttackData(tile);\n        tile.claimedBy.release(tile);\n      }\n\n      // Otherwise, claim that sucker.\n      else {\n        this.claim(tile);\n      }\n    }, this);\n\n    this._selector.reset();\n  },\n\n  /**\n   * Checks to see if the player has at least one valid move.\n   * Resets the selector after performing the check.\n   * @return {Boolean} Does a valid move exist?\n   */\n  hasValidMoves: function() {\n    var hasMove = this.selectRandom();\n    this._selector.reset();\n    return hasMove;\n  },\n\n  /**\n   * Makes a random valid selection.\n   * @return {Boolean} Was a valid selection made?\n   */\n  selectRandom: function() {\n\n    /**\n     * Given a starting tile, attempt to match two more: a secondary tile\n     * and the attack tile.\n     * @param  {Tile} initial The starting tile to test.\n     * @return {Boolean} Was a successful match made?\n     */\n    var attempt = initial => {\n\n        // Loop through the tiles until two more selections are valid.\n        // If no matches are found, the attempt fails and returns false.\n        return _.some(tiles, tile => {\n\n          // Get the attack tile from the initial and tile intersection.\n          var attackTile = this.getAttackTile(initial, tile);\n\n          // If the attack tile and loop tile are valid, we're good!\n          return attackTile && selector.validate(tile, attackTile).success();\n        });\n      },\n\n      // Cached reference to the player's selector.\n      selector = this._selector,\n\n      // The initial tile, if available. Otherwise undefined.\n      initial = selector.getInitial(),\n\n      // An array of all the available tiles for this player.\n      tiles = this._cubeCache._cube.getAvailableTiles(initial);\n\n    // If an initial tile is available and a match can be found, return true.\n    // This functionality is used by the bot in the last resort selection.\n    if (initial && attempt(initial)) {\n      return true;\n    }\n\n    // Run through all the tiles and try to find a match.\n    // If no match is found, false is returned.\n    return _.some(tiles, tile => {\n\n      // Reset the selector for a new starting point.\n      selector.reset();\n\n      // If the new tile is valid and the attempt to find two more succeeds,\n      // there is at least one valid move and true will be returned.\n      return selector.validate(tile).success() && attempt(tile);\n    });\n  },\n\n  _createAttackData: function(tile) {\n    return {\n      player: tile.claimedBy,\n      tile: tile,\n      toString: function() {\n        return '(attack -> ' + tile.toString() + ')'\n      }\n    };\n  }\n\n};\n\n_.assign(Bot.prototype, Player.prototype);\n\nexport default Player;\n","import _ from 'lodash';\nimport Tile from './cube/tile';\n\nfunction Recorder(app) {\n  this._timeline = [];\n  this._cursor = 0;\n  this._app = app;\n}\n\nRecorder.MESSAGES = {\n  NOT_FOUND: 'Could not locate a turn at ',\n  REWRITE: 'Turns are now being rewritten as the timeline was behind by ',\n  NO_LOG: '[No log for this turn]'\n};\n\nRecorder.prototype = {\n\n  record: function(player, tiles) {\n\n    var behind = this._timeline.length - this._cursor;\n\n    if (behind) {\n      console.warn(Recorder.MESSAGES.REWRITE + behind);\n      this._timeline = _.dropRight(this._timeline, behind);\n    }\n\n    this._package(player, tiles);\n    this._cursor++;\n  },\n\n  forward: function() {\n\n    var turnData = this._timeline[this._cursor];\n\n    if (turnData) {\n      _.forEach(turnData.tiles, function(tile) {\n        if (tile instanceof Tile) {\n          turnData.player.claim(tile);\n        }\n        else {\n          tile.player.release(tile.tile);\n        }\n      });\n      console.log(turnData.log);\n      this._cursor++;\n      this._app.setCurrentPlayer(this._app.getOpponent(turnData.player), true);\n    }\n    else {\n      throw Recorder.MESSAGES.NOT_FOUND + this._cursor;\n    }\n  },\n\n  reverse: function() {\n\n    var turnData = this._timeline[this._cursor - 1];\n\n    if (turnData) {\n      _.forEach(turnData.tiles, function(tile) {\n        if (tile instanceof Tile) {\n          turnData.player.release(tile);\n        }\n        else {\n          tile.player.claim(tile.tile);\n        }\n      });\n      this._cursor--;\n      this._app.setCurrentPlayer(turnData.player, true);\n    }\n    else {\n      throw Recorder.MESSAGES.NOT_FOUND + this._cursor;\n    }\n  },\n\n  _package: function(player, tiles) {\n    this._timeline.push({\n      player: player,\n      tiles: tiles,\n      log: player._logText || Recorder.MESSAGES.NO_LOG\n    });\n  }\n\n};\n\nexport default Recorder;\n","import _ from 'lodash';\n\n/**\n * A software interface for determining which keyboard keys are pressed.\n *\n * @param {Array || String} keyCodes A collection of all the (string) keyCodes used.\n */\nfunction Keyboard(keyCodes, speed) {\n\n  this.speed = speed;\n\n  // If the keyCodes are a string, split them into an array.\n  if (typeof keyCodes === 'string') {\n    keyCodes = keyCodes.split(' ');\n  }\n\n  // Loop through the codes and set them as keys.\n  this.keys = _.reduce(keyCodes, (collection, code) => {\n    collection[code] = false;\n    return collection;\n  }, {});\n}\n\nKeyboard.prototype = { \n\n  /**\n   * Creates and binds keyboard listener handlers for interactions.\n   * @param  {Function} callback A method to call from within the handlers.\n   * @param  {Object} context The object that will listen for keyboard events.\n   */\n  listen: function(callback, context = window) {\n\n    /**\n     * Creates a function bound to this Keyboard instance that\n     * partially includes the callback argument.\n     * @param  {Function} handler The core function that will be invoked.\n     * @return {Function} A new bound and filled function.\n     */\n    var generateHandler = handler => _.bind(_.partialRight(handler, callback), this);\n\n    // Configure bound listener handlers to ease removing later.\n    this._boundHandleKeydown = generateHandler(this._handleKeydown);\n    this._boundHandleKeyup = generateHandler(this._handleKeyup);\n\n    // Listen for keyup and keydown to trigger interactions.\n    context.addEventListener('keydown', this._boundHandleKeydown);\n    context.addEventListener('keyup', this._boundHandleKeyup);\n  },\n\n  /**\n   * Remove keyboard event listeners.\n   * @param  {Object} context The object to remove the listeners from.\n   */\n  stopListening: function(context = window) {\n    context.removeEventListener('keydown', this._boundHandleKeydown);\n    context.removeEventListener('keyup', this._boundHandleKeyup);\n  },\n\n  getMovement: function() {\n\n    var KB = Keyboard,\n        keys = this.keys,\n        x = 0,\n        y = 0;\n\n    // Detect either up or down movement.\n    if (keys[KB.UP] || keys[KB.W]) {\n      x = this.speed;\n    }\n    else if (keys[KB.DOWN] || keys[KB.S]) {\n      x = -this.speed;\n    }\n\n    // Detect either left or right movement.\n    if (keys[KB.LEFT] || keys[KB.A]) {\n      y = this.speed;\n    }\n    else if (keys[KB.RIGHT] || keys[KB.D]) {\n      y = -this.speed;\n    }\n\n    return {x, y};\n  },\n\n  _handleKeydown: function(evt, callback) {\n\n    var keyCode = evt.keyCode,\n        keys = this.keys;\n\n    if (!_.isUndefined(keys[keyCode]) && !keys[keyCode]) {\n      keys[keyCode] = true;\n      if (callback) {\n        callback();\n      }\n    }\n  },\n\n  _handleKeyup: function(evt, callback) {\n\n    var keyCode = evt.keyCode;\n\n    if (this.keys[keyCode]) {\n      this.keys[keyCode] = false;\n      if (callback) {\n        callback();\n      }\n    }\n  }\n\n};\n\n// Keyboard constants referencing keyCodes.\nKeyboard.UP = '38';\nKeyboard.DOWN = '40';\nKeyboard.LEFT = '37';\nKeyboard.RIGHT = '39';\nKeyboard.W = '87';\nKeyboard.A = '65';\nKeyboard.S = '83';\nKeyboard.D = '68';\nKeyboard.SPACE = '32';\nKeyboard.ESCAPE = '27';\n\nexport default Keyboard;\n","import _ from 'lodash';\nimport {EventEmitter} from 'events';\nimport Keyboard from './keyboard';\nimport Touch from './touch';\n\nfunction Renderer(cube, isMobile) {\n\n  // A reference to the game cube.\n  this.cube = cube;\n\n  // The keyboard interface for desktop interactions.\n  this.keyboard = null;\n\n  // And this is for touch interactions.\n  this.touch = null;\n\n  // The speed to animate the X axis.\n  this.moveX = 0;\n\n  // The speed to animate the Y axis.\n  this.moveY = 0;\n\n  // The total number of steps to animate a rotation.\n  this.tickMax = 90;\n\n  // The number of rendering steps left to animate.\n  this.tick = 0;\n\n  // How fast each tick animates.\n  this.speed = 5;\n\n  // Is the client a mobile device?\n  this.isMobile = isMobile;\n}\n\nRenderer.prototype = {\n\n  initialize: function() {\n\n    if (this.isMobile) {\n      this._input = new Touch(this.speed);\n    }\n    else {\n      this._input = new Keyboard([\n        Keyboard.UP,\n        Keyboard.DOWN,\n        Keyboard.LEFT,\n        Keyboard.RIGHT,\n        Keyboard.W,\n        Keyboard.A,\n        Keyboard.S,\n        Keyboard.D\n      ], this.speed);\n    }\n\n    this.cube.setRenderer(this);\n  },\n\n  /**\n   * Stops the input listening function from calculating a render.\n   */\n  listenForInput: function() {\n    this._input.listen(this._movementListener.bind(this));\n  },\n\n  /**\n   * Allows the input listening function to calculate renders.\n   */\n  stopListeningForInput: function() {\n    this._input.stopListening();\n  },\n\n  draw: function() {\n\n    // Reduce the ticks and rotate the cube\n    this.tick -= this.speed;\n    this.cube.rotate(this.moveX, this.moveY);\n\n    // If there are ticks left or a key is down, keep looping.\n    if (this.tick > 0 || this._setMovementFromInput()) {\n      this._loop();\n    }\n\n    // Otherwise, broadcast an event signifying that the rendering has completed.\n    else {\n      this.emit('end');\n    }\n  },\n\n  /**\n   * A public interface for manually setting the movement.\n   * @param {Number} x The target x coordinate.\n   * @param {Number} y The target y coordinate.\n   * @return {Promise} A promise that resolves when the movement animation ends.\n   */\n  setMovement: function(x, y) {\n\n    /**\n     * Configure a move in one direction and start the render loop.\n     * @param {Number} tick The distance to rotate.\n     * @param {String} coorProp Which coordinate to rotate on (moveX or moveY).\n     */\n    var move = (tick, coorProp) => {\n      this.tick = Math.abs(tick);\n      this[coorProp] = !tick ? 0 : tick < 0 ? -this.speed : this.speed;\n      this._loop();\n    };\n\n    // Return a promise that will resolve when both x and y movements are complete.\n    return new Promise(resolve => {\n      move(x, 'moveX');\n      this.once('end', () => {\n        move(y, 'moveY');\n        this.once('end', resolve);\n      });\n    });\n  },\n\n  setSyncMovement: function(x = 0, y = 0) {\n\n    var speed = this.speed;\n\n    return new Promise(resolve => {\n      this.tick = Math.max(x, y);\n      this.moveX = x === 0 ? 0 : x < 0 ? -speed : speed;\n      this.moveY = y === 0 ? 0 : y < 0 ? -speed : speed;\n      this._loop();\n      this.once('end', resolve);\n    });\n  },\n\n  _loop: function() {\n    window.requestAnimationFrame(this.draw.bind(this));\n  },\n\n  _movementListener: function() {\n    if (this.tick <= 0 && this._setMovementFromInput()) {\n      this._loop();\n      this.emit('start');\n    }\n  },\n\n  _setMovementFromInput: function() {\n\n    var movement = this._input.getMovement();\n    this.moveX = movement.x;\n    this.moveY = movement.y;\n\n    // If there is movement, set tick and return true.\n    if (this.moveX !== 0 || this.moveY !== 0) {\n      this.tick = this.tickMax;\n      return true;\n    }\n\n    // Movement was not set.\n    return false;\n  }\n\n};\n\n// Mixin the EventEmitter methods for great justice.\n// Ditch when we migrate to Browserify.\n_.assign(Renderer.prototype, EventEmitter.prototype);\n\nexport default Renderer;\n","import _ from 'lodash';\nimport Hammer from 'hammerjs';\n\nfunction Touch(speed) {\n  this.speed = speed;\n  this.queue = [];\n  this.iface = new Hammer(document.body);\n\n  // Configure the swipe gesture.\n  this.iface\n    .get('swipe')\n    .set({\n      direction: Hammer.DIRECTION_ALL,\n      threshold: 0.1,\n      velocity: 0.1\n    });\n}\n\nTouch.prototype = {\n\n  listen: function(callback) {\n    this._boundHandleSwipe = _.bind(_.partialRight(this._handleSwipe, callback), this);\n    this.iface.on('swipe', this._boundHandleSwipe);\n  },\n\n  stopListening: function() {\n    this.iface.off('swipe', this._boundHandleSwipe);\n  },\n\n  getMovement: function() {\n\n    var movement = this.queue.shift(),\n        x = 0,\n        y = 0;\n\n    switch (movement) {\n      case Touch.UP:\n        x = -this.speed;\n        break;\n      case Touch.DOWN:\n        x = this.speed;\n        break;\n      case Touch.LEFT:\n        y = this.speed;\n        break;\n      case Touch.RIGHT:\n        y = -this.speed;\n        break;\n    }\n\n    return {x, y};\n  },\n\n  _handleSwipe: function(evt, callback) {\n    this.queue.push(evt.offsetDirection);\n    if (callback) {\n      callback();\n    }\n  }\n\n};\n\nTouch.UP = Hammer.DIRECTION_UP;\nTouch.DOWN = Hammer.DIRECTION_DOWN;\nTouch.LEFT = Hammer.DIRECTION_LEFT;\nTouch.RIGHT = Hammer.DIRECTION_RIGHT;\n\nexport default Touch;\n","import _ from 'lodash';\nimport Line from '../cube/line';\n\nfunction CubeCache(cube) {\n\n  // A reference to the cube.\n  this._cube = cube;\n\n  // Create cache objects to hold claimed tiles.\n  this.initialize();\n}\n\nCubeCache.prototype = {\n\n  /**\n   * Called on instantiation and reset, this initialize a fresh cache\n   * in two collecitons: An object keyed by cube side id to contain lines\n   * and an array to contain single tiles.\n   */\n  initialize: function() {\n\n    // A collection of lines created by side.\n    this._lineMap = _.reduce(this._cube.getSides(), (sides, side, id) => {\n      sides[id] = [];\n      return sides;\n    }, {});\n\n    // A collection of claimed tiles that are not part of lines.\n    this._singles = [];\n  },\n\n  add: function(tile) {\n\n    var claimedBy = tile.claimedBy,\n        xPartial = this._getPartialLineTiles(tile.xLine, claimedBy),\n        yPartial = this._getPartialLineTiles(tile.yLine, claimedBy),\n        xGrow = this._growLine(xPartial),\n        yGrow = this._growLine(yPartial);\n\n    // If a line was grown or created from this tile, ensure it's removed from\n    // the singles collection.\n    if (xGrow || yGrow) {\n      this._singles = _.difference(this._singles, tile.getAllLineTiles());\n    }\n\n    // Else, add the tile to the singles collection.\n    else {\n      this._singles.push(tile);\n    }\n  },\n\n  remove: function(tile) {\n\n    var claimedBy = tile.claimedBy,\n        xPartial = this._getPartialLineTiles(tile.xLine, claimedBy),\n        yPartial = this._getPartialLineTiles(tile.yLine, claimedBy),\n        xShrink,\n        yShrink;\n\n    _.pull(xPartial, tile);\n    _.pull(yPartial, tile);\n\n    xShrink = this._shrinkLine(xPartial, true);\n    yShrink = this._shrinkLine(yPartial, false);\n\n    // If there's some shrinkage, update the singles collection accordingly.\n    if (xShrink || yShrink) {\n\n      // We need to make sure that the tiles gathered in the partial are\n      // not part of another line. If they are, don't add them as singles.\n      if (xShrink && !this._composesLines(xPartial)) {\n        this._singles = _.union(this._singles, xPartial);\n      }\n      if (yShrink && !this._composesLines(yPartial)) {\n        this._singles = _.union(this._singles, yPartial);\n      }\n    }\n\n    // Otherwise, safely remove the tile from the singles collection\n    // if it exists in there.\n    else {\n      _.pull(this._singles, tile);\n    }\n  },\n\n  /**\n   * Retrieves all the lines, sorted by the number of tiles contained\n   * in each line.\n   * @return {Array} A collection of lines.\n   */\n  getLines: function() {\n    return this._getLinesAsChain()\n      .sortBy(line => line._tiles.length)\n      .value();\n  },\n\n  /**\n   * Retrieves all cached tiles.\n   * @return {Array} A colleciton of all the cached tiles.\n   */\n  getAllTiles: function() {\n    return this._getLinesAsChain()\n      .map(line => line.getTiles())\n      .flatten()\n      .uniq()\n      .concat(this._singles)\n      .value();\n  },\n\n  /**\n   * Fetches a chain-wrapped collection of cached lines, flattened and\n   * compacted into one array.\n   * @return {lodash} A lodash chain-wrapped collection.\n   */\n  _getLinesAsChain: function() {\n    return _.chain(this._lineMap)\n      .values()\n      .flatten()\n      .compact()\n  },\n\n  _getPartialLineTiles: function(line, claimedBy) {\n    return _.filter(line.getTiles(), tile => tile.claimedBy === claimedBy);\n  },\n\n  _growLine: function(tiles) {\n\n    var side, line;\n\n    if (tiles.length > 1) {\n\n      side = this._lineMap[_.first(tiles).side.id];\n      line = _.find(side, function(ln) {\n        return ln.some(tiles);\n      });\n\n      // If a line exists already, update it with the new tiles.\n      if (line) {\n        line.update(tiles);\n      }\n\n      // Otherwise, create a new line with the given tiles.\n      else {\n        side.push(new Line(tiles));\n      }\n\n      // A line was created or updated.\n      return true;\n    }\n\n    // A line was not created.\n    return false;\n  },\n\n  /**\n   * Shrinks a line.\n   * @param  {Array} tiles The tiles used in the shrinkage\n   * @return {Boolean} Was a line disassebled?\n   */\n  _shrinkLine: function(tiles, isHorizontal) {\n\n    var side, line;\n\n    if (tiles.length) {\n\n      side = this._lineMap[_.first(tiles).side.id];\n      line = _.find(side, function(ln) {\n        return ln.isHorizontal() === isHorizontal && ln.all(tiles);\n      });\n\n      // Line should exist but just in case...\n      if (line) {\n\n        // If there's only one tile, it's not a line. Pull it.\n        if (tiles.length === 1) {\n          _.pull(side, line);\n\n          // A line was disassembled. Return true.\n          return true;\n        }\n\n        // Otherwise, update the line with the remaining tiles.\n        else {\n          line.update(tiles);\n        }\n      }\n    }\n\n    // A line was not disassembled.\n    return false;\n  },\n\n  _composesLines: function(tiles) {\n    var side = this._lineMap[_.first(tiles).side.id];\n    return _.find(side, function(line) {\n      return line.all(tiles);\n    });\n  }\n\n};\n\nexport default CubeCache;","import _ from 'lodash';\nimport TileSelectorResult from './TileSelectorResult';\n\n/**\n * Instances of this class are used for making valid tile selections\n * and returning results containing data describing the selections.\n * The validate method is the core of TileSelector and is mostly used\n * inside the Player.selectTile wrapper.\n */\nclass TileSelector {\n\n  /**\n   * Constructor method. This sets an internal _player property which is\n   * only currently used once (in the attack portion of validate). It also\n   * sets the _selected property as an empty array via reset().\n   * @param  {Player} player The player bound to this TileSelector instance.\n   * @constructor\n   */\n  constructor(player) {\n    this._player = player;\n    this.reset();\n  }\n\n  /**\n   * Resets the _selected array to it's initial empty state.\n   */\n  reset() {\n    this._selected = [];\n  }\n\n  /**\n   * Removes the last n selections and returns the updated _selected array.\n   * @param  {Number} n The number of selections to revert.\n   * @return {Array} The updated _selected array.\n   */\n  revert(n = 1) {\n    var slice = _.dropRight(this._selected, n);\n    this._selected = slice;\n    return slice;\n  }\n\n  /**\n   * Retrieves the contents of the _selected array.\n   * @return {Array} The _selected array.\n   */\n  getSelected() {\n    return this._selected;\n  }\n\n  /**\n   * Retrieves the first item in the _selected array.\n   * @return {Tile} The initial selected tile.\n   */\n  getInitial() {\n    return _.first(this._selected);\n  }\n\n  /**\n   * Computes whether or not the passed tile or tiles are valid selections.\n   * Different test cases include:\n   * - Was a tile passed?\n   * - Is the tile already claimed?\n   * - Is there an initial tile? Should it be deselected? Is it a neighbor?\n   * - Was an attack tile passed? Is it a valid target?\n   * @param {Tile} tile A tile to validate.\n   * @param {Tile} attackTile Another tile to validate.\n   * @return {TileSelectorResult} A result object containing data describing the action.\n   */\n  validate(tile, attackTile) {\n\n    // Get a reference to the first tile selected.\n    var initial = this.getInitial(),\n\n        // A package of data sent in resolved promises.\n        resolveData = {};\n\n    // If a tile wasn't passed, exit immediately.\n    if (!tile) {\n      return TileSelectorResult.failure();\n    }\n\n    // If the tile is already claimed, get outta dodge.\n    if (tile.claimedBy) {\n      return TileSelectorResult.failure(TileSelectorResult.FAILURE_CLAIMED);\n    }\n\n    // If an initial tile exists, run some tests.\n    if (initial) {\n\n      // If the initial tile is selected, deselected it and bail out.\n      if (tile === initial) {\n        return TileSelectorResult.success(\n          this._deselect(tile)\n        );\n      }\n\n      // If the new selected tile is on the same side as the\n      // initial tile, deselect the initial tile.\n      if (tile.side === initial.side) {\n        resolveData = this._deselect(initial);\n      }\n\n      // Else, if the side selected is not a neighbor, bail out.\n      else if (!initial.isNeighboringSide(tile)) {\n        return TileSelectorResult.failure(TileSelectorResult.FAILURE_NOT_NEIGHBOR);\n      }\n    }\n\n    // If the attack tile exists, run even more tests.\n    if (attackTile) {\n\n      // If the attack tile is valid, that means both tiles can be selected\n      // and everything can be claimed. Exit true as we're done selecting tiles.\n      if (this._player.canAttack(attackTile)) {\n        return TileSelectorResult.success(\n          _.merge(resolveData, this._select(tile, attackTile))\n        );\n      }\n      else {\n        return TileSelectorResult.failure(TileSelectorResult.FAILURE_CANNOT_ATTACK);\n      }\n    }\n\n    // Otherwise, the initial tile must have been selected. Pass the resolve data\n    // along in case a tile was deselected first (as in the side === side case).\n    else {\n      return TileSelectorResult.success(\n        _.merge(resolveData, this._select(tile))\n      );\n    }\n\n    // We'll probably never make it this far but let's return a promise just in case.\n    return TileSelectorResult.failure();\n  }\n\n  /**\n   * Adds tiles to the _selected array and returns a command object containing\n   * the complete _selected array contents.\n   * @param {Tile...} Any number of Tile objects that were selected.\n   * @return {Object} A command object describing the action.\n   */\n  _select() {\n    var tiles = _.toArray(arguments);\n    Array.prototype.push.apply(this._selected, tiles);\n    return {\n      selected: this._selected\n    };\n  }\n\n  /**\n   * Removes a tile from the _selected array and returns a command object\n   * describing the action. This object will eventually be passed to a\n   * Promise returned from validate().\n   * @param  {Tile} tile The tile to remove.\n   * @return {Object} A command object describing the action.\n   */\n  _deselect(tile) {\n    _.pull(this._selected, tile);\n    return {\n      deselect: [tile]\n    };\n  }\n\n}\n\nexport default TileSelector;\n","/**\n * Used in TileSelector, the TileSelectorResult object provides an\n * easy to use API for interacting with validate calls.\n * In general, these objects should be created with the static methods.\n *\n * Common use cases with TileSelector:\n *\n * var selector = new TileSelector(player);\n *\n * 1.\n * selector.validate(tile).success() -> Returns a boolean\n *\n * 2.\n * selector\n *   .validate(tile)\n *   .success(function(data) {\n *     // Do something with success data.\n *   })\n *   .failure(function(code) {\n *     // React to error code.\n *   });\n */\nclass TileSelectorResult {\n\n  /**\n   * Constructor method. Sets properties intended to be private.\n   * @param  {Boolean} success Is the result successful?\n   * @param  {String|Object} data A payload describing the result.\n   *                              Strings for failure codes and objects for result metadata.\n   * @constructor\n   */\n  constructor(success, data) {\n    this._success = success;\n    this._data = data;\n  }\n\n  /**\n   * One of the chainable callbacks, success will either return a boolean\n   * describing the success state or itself if a callback is provided.\n   * The callback will be invoked if the success state is true.\n   * @param  {Function} callback A method to invoke if the success state is true,\n   *                             passing the _data value.\n   * @return {TileSelectorResult} Returns itself for chaining.\n   */\n  success(callback) {\n    if (!callback) {\n      return this._success;\n    }\n    if (this._success) {\n      callback(this._data);\n    }\n    return this;\n  }\n\n  /**\n   * The other chainable callback, failure will either return a boolean\n   * describing the success state or itself if a callback is provided.\n   * The callback will be invoked if the success state is false.\n   * @param  {Function} callback A method to invoke if the success state is false,\n   *                             passing the _data value.\n   * @return {TileSelectorResult} Returns itself for chaining.\n   */\n  failure(callback) {\n    if (!callback) {\n      return !this._success;\n    }\n    if (!this._success) {\n      callback(this._data);\n    }\n    return this;\n  }\n\n  /**\n   * The recommended method for creating a new successful TileSelectorResult.\n   * @param  {Object} data A map describing the success state.\n   * @return {TileSelectorResult} A new successful TileSelectorResult.\n   * @static\n   */\n  static success(data) {\n    return new TileSelectorResult(true, data);\n  }\n\n  /**\n   * The recommended method for creating a new failed TileSelectorResult.\n   * @param  {String} code The failure code.\n   * @return {TileSelectorResult} A new failed TileSelectorResult.\n   * @static\n   */\n  static failure(code) {\n    return new TileSelectorResult(false, code);\n  }\n\n}\n\n// Failure codes.\nTileSelectorResult.FAILURE_CLAIMED = 'claimed';\nTileSelectorResult.FAILURE_NOT_NEIGHBOR = 'notNeighbor';\nTileSelectorResult.FAILURE_CANNOT_ATTACK = 'cannotAttack';\n\nexport default TileSelectorResult;\n","import _ from 'lodash';\nimport {EventEmitter} from 'events';\n\n/**\n * A lightweight guided tutorial helper that is attached to a specific\n * event-emitting object, such as the cube. Displays helpful messages\n * to teach the player how to play.\n * @param {Object} target An event-emitting object to provide guidance for.\n * @class\n */\nfunction Tutorial() {}\n\nTutorial.prototype = {\n\n  /**\n   * Wraps an object's method with another method that invokes the\n   * tutorial's emission of a message event. This emission happens\n   * only once, and restores the previous method's state afterwards.\n   * @param  {Object} obj The host object.\n   * @param  {String} methodName The method name to wrap.\n   * @param  {String} key The lesson key.\n   * @return {Tutorial} This tutorial instance for chaining.\n   */\n  hook: function(obj, methodName, key) {\n    var oldMethod = obj[methodName];\n    obj[methodName] = _.bind(function() {\n      var result = oldMethod.apply(obj, arguments);\n      this.emit('message', Tutorial.lessons[key]);\n      obj[methodName] = oldMethod;\n      return result;\n    }, this);\n    return this;\n  }\n\n};\n\n// Mixin EventEmitter methods.\n_.assign(Tutorial.prototype, EventEmitter.prototype);\n\n// List of step messages.\nTutorial.stepMessages = [\n  'Let\\'s play! Click any tile to begin.',\n  'Rotate the cube using the arrow keys or WASD.',\n  'Great! Now, click a tile on an adjacent side.',\n  'Nice! A third tile was selected automatically for you.',\n  'Try to make a line on one side.'\n];\n\nTutorial.lessons = {\n  start: [\n    'Let\\'s play! Click any tile to begin.',\n    'Rotate the cube using the arrow keys or WASD.'\n  ],\n  click: 'Great! Now, click a tile on an adjacent side.',\n  turn: [\n    'Nice! A third tile was selected automatically for you.',\n    'Try to make a line on one side!'\n  ]\n};\n\nexport default Tutorial;\n","export function listenOnce(target, type, callback) {\n  var handler = evt => {\n    target.removeEventListener(type, handler);\n    callback(evt);\n  };\n  target.addEventListener(type, handler);\n}\n","var STYLE = document.body.style,\n\n    TRANSFORM = 'Transform',\n\n    // Prefixes used for things like Transform.\n    STYLE_PREFIXES = ['ms', 'O', 'Moz', 'Webkit'],\n\n    // Animation end events. Not quite perfect as IE10+\n    // actually uses 'animation' -> 'MSAnimationEnd'\n    // I'll fix this later.\n    // So ridiculous. Can't these be consistent?!\n    // ...\n    // Map format:\n    // 'css-attribute':       [start, iteration, end]\n    ANIMATION_EVENT_MAP = {\n      'animation':            ['animationstart', 'animationiteration', 'animationend'],\n      '-o-animation':         ['oAnimationStart', 'oAnimationIteration', 'oAnimationEnd'],\n      '-moz-animation':       ['animationstart', 'animationiteration', 'animationend'],\n      '-webkit-animation':    ['webkitAnimationStart', 'webkitAnimationIteration', 'webkitAnimationEnd']\n    },\n\n    msAnimationEnd = 'MSAnimationEnd',//TODO\n    \n    len = STYLE_PREFIXES.length,\n\n    stylePrefix,\n\n    animationProperty,\n\n    eventTypes,\n\n    // Objects to hold browser-specific settings.\n    js = {},\n    css = {},\n    events = {};\n\n// First, let's determine the style prefix.\nwhile (len--) {\n  if ((STYLE_PREFIXES[len] + TRANSFORM) in STYLE) {\n    stylePrefix = STYLE_PREFIXES[len];\n    break;\n  }\n}\n\n// If there isn't a proper prefix, use the standard transform.\nif (!stylePrefix) {\n  stylePrefix = TRANSFORM.toLowerCase();\n}\n\n// Next, let's set some properties using the prefix.\njs.transform = stylePrefix + TRANSFORM;\ncss.transform = stylePrefix ? '-' + stylePrefix.toLowerCase() + '-transform' : 'transform';\n\n// Now, let's determine the event end name. So messed up.\nfor (animationProperty in ANIMATION_EVENT_MAP) {\n  if (typeof STYLE[animationProperty] !== 'undefined') {\n    eventTypes = ANIMATION_EVENT_MAP[animationProperty];\n    events.animationStart = eventTypes[0];\n    events.animationIteration = eventTypes[1];\n    events.animationEnd = eventTypes[2];\n    break;\n  }\n}\n\n// Normalize requestAnimationFrame for cross-browser compatibility.\nwindow.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\nexport {js, css, events};\n"],"sourceRoot":"/source/"}