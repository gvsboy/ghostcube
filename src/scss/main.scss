@import 'base';

html {
  font-size: 16px; /* Set base font size for em conversion */
}

body {
  margin: 0;
  background-color: #000;
  font-size: 62.5%; /* make em conversion simple as pie (/10) */
  font-family: Verdana, sans-serif;
}

h1 {
  margin: 0;
  color: #6385a7;
  font-size: 6em;
  font-weight: normal;
  -webkit-font-smoothing: subpixel-antialiased;
}

h2 {
  margin: 0;
  color: $cube-color;
  font-size: 3em;
  font-weight: normal;
  line-height: 0.4em;
  margin-left: 0.1em;
  -webkit-font-smoothing: subpixel-antialiased;
}


/*----------------------------------------------

  Media Queries

----------------------------------------------*/

// iPhone 5/5S
@media only screen 
  and (min-device-width: 320px) 
  and (max-device-width: 568px)
  and (-webkit-min-device-pixel-ratio: 2) {
  html { font-size: 20px; }
}

// iPhone 6
@media only screen 
  and (min-device-width: 375px) 
  and (max-device-width: 667px) 
  and (-webkit-min-device-pixel-ratio: 2) { 
  html { font-size: 20px; }
}

// iPhone 6+
@media only screen 
  and (min-device-width: 414px) 
  and (max-device-width: 736px) 
  and (-webkit-min-device-pixel-ratio: 3) { 
  html { font-size: 24px; }
}

// iPad
@media only screen 
  and (min-device-width: 768px) 
  and (max-device-width: 1024px) {
  html { font-size: 20px; }
}

// Galaxy S5
@media screen 
  and (device-width: 360px) 
  and (device-height: 640px) 
  and (-webkit-device-pixel-ratio: 3) {
  html { font-size: 22px; }
}


/*----------------------------------------------

  Compat

----------------------------------------------*/

.no-3d {

  #hit, .cube {
    display: none;
  }

  #stage::before {
    content: '\2665';
    color: $cube-color;
    font-size: $cube-size * 2;
    line-height: 0.6em;
  }

  h2 {
    &::after {
      content: '\a\a\a (and wishes you didn\'t use IE) ;)';
      white-space: pre;
    }
  }
}


/*----------------------------------------------

  Cube

----------------------------------------------*/

#container {
  position: absolute;
  top: 50%;
  left: 50%;
  width: $cube-size;
  height: $cube-size;
  margin-top: -($cube-size / 2);
  margin-left: -(($header-width + $header-offset) / 2);
  @include animation(splash-cube $splash-speed forwards);

  &.game {
    @include game-start-animation(game-cube);

    #header {
      @include game-start-animation(game-header);
    }

    #stage {
      @include game-start-animation(stage);
    }

  }
}

/**
 * Click events with animated 3D elements are jank so let's use
 * a click mask over the initial cube state instead.
 */
#hit {
  position: absolute;
  z-index: 10;
  top: -($cube-size * 0.25);
  left: -($cube-size * 0.25);
  width: $cube-size * 1.5;
  height: $cube-size * 1.5;
  cursor: pointer;

  &:hover + #wrap .face {
    background-color: $cube-color;
    border-color: #000;
  }
}

#wrap {
  position: relative;
}

#header {
  overflow: hidden;
  margin-top: -1.4em;
  margin-left: $header-offset;
  padding-bottom: 1.4em;
  white-space: nowrap;
  -webkit-font-smoothing: subpixel-antialiased;
  @include animation(splash-header $splash-speed forwards);
}

#stage {
  position: absolute;
  top: 1em;
  left: 0;
  -webkit-perspective: 10000px; // This prevents rendering issues introduced by the 3d-transformed cube element.
}

#messages {
  position: relative;
  margin: 2em;
  padding: 0;
  list-style-type: none;

  li {
    height: 1.5em;
    font-size: 2em;
    color: #fff;
    overflow: hidden;
    cursor: default;
    pointer-events: none;
    -webkit-font-smoothing: subpixel-antialiased;
    @include animation(message-add 4s forwards);

    &.error {
      color: red;
    }

    &.alert {
      font-size: 4em;
      color: yellow;
    }

    &.persist {
      @include animation(message-add-persist 4s forwards);
    }
    
    &.hide {
      @include animation(message-add-persist-hide 0.8s forwards);
    }
  }

}

.cube {
  width: $cube-size;
  height: $cube-size;
  @include backface-visibility(hidden);
  @include transform-style(preserve-3d);
  @include animation(cube-rotate 4s linear infinite);

  &.transition {
    @include animation(cube-rotate-stop $BASE-SPEED ease-out forwards);
  }

  &.init {
    @include animation(none);
    @include transform(rotateX($cube-init-x) rotateY($cube-init-y));
  }

  &.reset {
    @include animation(cube-reset 1s forwards);
  }
}

.face {
  position: absolute;
  width: $cube-size;
  height: $cube-size;
  border: 0.4em solid $cube-color;
  border-radius: 0.8em;
  cursor: pointer;
  @include transform-style(preserve-3d);
  @include transition(background-color 0.4s, border-color 0.4s);
}



/* Cube */

#front {
  @include transform(translateZ($cube-z));
}
#back {
  @include transform(rotateY(180deg) translateZ($cube-z));
}
#right {
  @include transform(rotateY(90deg) translateZ($cube-z));
}
#left {
  @include transform(rotateY(-90deg) translateZ($cube-z));
}
#top {
  @include transform(rotateX(90deg) translateZ($cube-z));
}
#bottom {
  @include transform(rotateX(-90deg) translateZ($cube-z));
}



/* Tiles */

.tile {
  display: none;
  position: absolute;
  width: $tile-size;
  height: $tile-size;
  border: 0.2em solid $cube-color;
  background-color: #000;
  @include transform(translateZ(0.01em));

  color: #fff;//debug

  &.highlighted {
    background-color: $tile-highlighted;
  }

  &:hover {
    background-color: $cube-color;
  }

  &.selected {
    background-color: $tile-selected;
  }

  &.helper {
    background-color: $tile-helper;
  }

  &.init {
    display: block;
    @include animation(tile-start $game-speed forwards);
  }

  &.preclaimed {
    &.player1 {
      @include animation(tile-claimed-player1 0.5s forwards);
    }
    &.player2 {
      @include animation(tile-claimed-player2 0.5s forwards);
    }
  }

  &.unclaimed {
    @include animation(none);
  }

  &.claimed {
    @include animation(none);
    &.player1 {
      background-color: $player1-color;
      .player2-turn &.helper {
        @include animation(attack-player1 0.25s infinite);
      }
    }
    &.player2 {
      background-color: $player2-color;
      .player1-turn &.helper {
        @include animation(attack-player2 0.25s infinite alternate);
      }
    }
  }

  // Win tiles override preclaimed and claimed animations,
  // so let's organize them here in their own blocks.
  &.preclaimed.player1.win,
  &.claimed.player1.win {
    @include animation(win-player1 1s infinite alternate);
  }
  &.preclaimed.player2.win,
  &.claimed.player2.win {
    @include animation(win-player2 1s infinite alternate);
  }
}

// Setting up the tile layout.
@for $t from 1 through 9 {
  .tile:nth-child(#{$t}) {
    @if $t <= 3           { top: 0; }
    @else if $t <= 6      { top: $tile-size + $tile-gap-size; }
    @else                 { top: ($tile-size + $tile-gap-size) * 2; }
    @if $t % 3 == 1       { left: 0; }
    @else if $t % 3 == 2  { left: $tile-size + $tile-gap-size; }
    @else                 { left: ($tile-size + $tile-gap-size) * 2; }
  }
}

